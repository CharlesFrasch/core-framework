#!/bin/bash
#
# Runs relative to bulkio project
#

# can't use relative path for subdir's
# must get actual path so that subdir's use the correct path
bulkio_top=$(cd ../../..;pwd)
bulkio_libsrc_top=$bulkio_top/libsrc
bulkio_libsrc_testdir=$bulkio_top/libsrc/testing/tests
export LD_LIBRARY_PATH=$bulkio_libsrc_top/.libs:$bulkio_top/.libs:$bulkio_top/jni/.libs:${LD_LIBRARY_PATH}
export PYTHONPATH=$bulkio_libsrc_top/python:$bulkio_libsrc_top/testing/helpers:${PYTHONPATH}
export CLASSPATH=${bulkio_libsrc_top}/bulkio.jar:${bulkio_top}/BULKIOInterfaces.jar:${CLASSPATH}

# Limit the number of threads Java uses for the garbage collector to avoid
# misleading Java "out of memory" errors that in all actuality  appear to be
# due to hitting the per-user process limit
export _JAVA_OPTIONS="-XX:ParallelGCThreads=1"

nosetest_cmd=
xml=
if [ $# -gt 0 ];
then
   if [ "-xml" == "${1##[-+]}" ];
   then
       xml="--xml"
       nosetest_cmd="nosetests"
       shift
   fi
fi

#
#  Run Python Sandbox based testing..
#
if [[ $xml ]]
then
    if [ $# -gt 0 ]
    then
        $nosetest_cmd --with-xunit --xunit-file $bulkio_libsrc_testdir/nosetests-bulkio-ports-results.xml  $*
    else
        for pt in test_*.py ; do
            outfile="$bulkio_libsrc_testdir/nosetests-bulkio-"${pt%.py}"-results.xml"
            $nosetest_cmd --with-xunit --xunit-file $outfile  $pt
        done
    fi
else
   if [ $# -gt 0 ]
   then
       # run an associated test script
       python  $*
       exit
   else
       for pt in test_*.py ; do
          python $pt
       done
   fi
fi

#
#  Run Java unit tests
#
cd java
./runtests $xml
cd -

#
#  Run C++ unit tests
#
cd cpp
./runtests $xml
cd -

#
# Run Python unit tests with XML output
#
# NOTE: virtualenv aliases python in the shell, so it's necessary to explicitly
# run runtests.py via python
(cd python && ./runtests $xml)

#
# Resource level unit tests
#
run_resource_test() {
rdir=$1
comp=$2
results_file=$3
xml=$4
test_cmd="test_$comp.py"

cd ../$rdir/$comp/tests/
if [[ $xml ]]
then
    ./$test_cmd --with-xunit --xunit-file "$results_file" --xunit-testsuite-name="$comp" test_$comp.py
else
    ./$test_cmd
fi
cd -
}

run_component_test() {
    run_resource_test components $@
}

run_device_test() {
    run_resource_test devices $@
}


#
#  Run Large Packet Size Test
#
#
run_resource_test TestLargePush "$bulkio_libsrc_testdir/nosetests-bulkio-large-push-results.xml"  $xml


#
#  Run Attachable/Multiout Test
#
#
run_resource_test multiout_attachable "$bulkio_libsrc_testdir/nosetests-bulkio-multiout-attachable-results.xml"  $xml


#
#  Run Oversized frame data Test
#
#
run_resource_test Oversized_framedata "$bulkio_libsrc_testdir/nosetests-bulkio-oversized-frames-results.xml"  $xml

#
#  Run port lock Test
#
#
run_resource_test src "$bulkio_libsrc_testdir/nosetests-bulkio-port-block-results.xml"  $xml


#  Run jni reference resolution
#
#
run_resource_test dev_src "$bulkio_libsrc_testdir/nosetests-bulkio-jni-reference-results.xml"  $xml dev
