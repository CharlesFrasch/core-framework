#!/usr/bin/env python
'''
__MANPAGE__

===================
redhawk-wf-control
===================

========================================

redhawk_wf_control [--help] [Options] <Operation>

DESCRIPTION
========================================

Interact with the REDHAWK domain by creating a waveform, removing a waveform,
or printing domain, waveform, and component status.

Options:
^^^^^^^^
  -h, --help            show this help message and exit

  -d DOMAINNAME, --domain-name=DOMAINNAME              
                        The domain name to attach to. Required for create and
                        remove                                               

  -w WAVEFORMINSTANCENAME, --waveform-instance-name=WAVEFORMINSTANCENAME     
                        The name of the waveform. Required for create mode   

  -u WAVEFORMURI, --waveform-uri=WAVEFORMURI                                 
                        The name of the waveform. Required for create mode   

  -o OPERATION, --operation=OPERATION                                        
                        The operation to perform. Options: create, remove,   
                        status                                               

  -p, --properties      When printing waveform status, lists all properties  
                        for the given waveform

  -c COMPONENT, --component=COMPONENT
                        When printing waveform status, prints only the
                        provided component's information.

  -e EDITPROPERTIES, --edit=EDITPROPERTIES
                        Edits the provided property. To edit a property,
                        waveform name and component name must be provided. The
                        property will be changed via -e prop=value or -e
                        prop.id=value. Any number of properties can be changed
                        at the same time using multiple -e flags in a row.
                        Properties can only be changed when using the status
                        operation.

Operations:
^^^^^^^^^^^
 status  Status prints out information about the domain or a waveform.
         If no domain name is provided, status prints out a list of available
         domains. If domain is provided, status prints a list of available
         waveforms in that domain. If domain name and waveform name or id are
         provided, a detailed status of that particular waveform is printed.
         Using a Component name in addition to the waveform name will print
         the waveform status and only the specified component status. No
         other components will be printed.

 create  Create creates a new waveform in the domain provided. Domain
         name and waveform name are required options when using this
         operation.

 remove  Remove removes a waveform from the domain. Domain name and
         waveform ID are required to remove a waveform.


RETURNS:
========

    == 0  **SUCCESS**

    > 0   **ERROR**


EXAMPLES
========================================

Help
^^^^
The following command will display the help associated with this command:

   **redhawk_waveform.py --help**

status 
^^^^^^
The following command will status the TOA domain for running waveforms:

   **redhawk_waveform.py -d TOA status**

BUGS
========================================

N/A

NOTES:
========================================

N/A

SEE ALSO
========================================

__MANPAGE__
'''


import os,sys
if 'OSSIEHOME' not in os.environ:
    sys.path.append("/usr/local/redhawk/core/lib64/python")
    sys.path.append("/usr/local/redhawk/core/lib/python")

import getopt
import signal
from textwrap import TextWrapper
from optparse import OptionParser


from ossie.utils import redhawk

def printErr(string):
    print >>sys.stderr, string

def printDividerLine(lineChar, width=70):
    """ Prints a line of the given width and fills it with the provided 
    lineChar"""
    print dividerLine(lineChar, width).rstrip()

def dividerLine(lineChar, width=70):
    """ Same as printDividerLine but return str instead of printing"""
    str = lineChar * width
    str += "\n"
    return str

def printl(text, width=80):
    """
    Prints the text provided, but automatically splits lines if a line is
    greater than the provided width. Width defaults to 80 characters. 
    """
    print wrapText(text, width=width)


def wrapText(text, width=80):
    """
    Wraps the text provided by automatically splitting lines if a line is
    greater than the provided width. Width defaults to 80 characters. 
    """
    wrappedText = ""
    for line in text.split('\n'):
        while len(line) > width:
            index = line.rfind(" ", 0, width+1)
            if index >= 0:
                wrappedText += line[:index] + "\n"
                line = line[index+1:]
            else:
                break

        wrappedText += line
        if not line.endswith('\n'):
            wrappedText += "\n"

    # Remove the last newline
    wrappedText = wrappedText[:-1]

    return wrappedText

def get_terminal_height(fd=1):
    """
    Returns height of terminal if able, 0 otherwise

    :param fd: file descriptor (default: 1=stdout)
    """
    try:
        height = _get_terminal_size(fd)[0]
    except:
        height = 0

    return height


def get_terminal_width(fd=1):
    """
    Returns width of terminal if able, 0 otherwise

    :param fd: file descriptor (default: 1=stdout)
    """
    try:
        width = _get_terminal_size(fd)[1]
    except:
        width = 0

    return width

def _get_terminal_size(fd=1):
    """
    Returns height and width of current terminal. First tries to get
    size via termios.TIOCGWINSZ, then from environment. Defaults to 25
    lines x 80 columns if both methods fail.

    :param fd: file descriptor (default: 1=stdout)
    """
    try:
        import fcntl, termios, struct
        hw = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
    except:
        try:
            hw = (os.environ['LINES'], os.environ['COLUMNS'])
        except:
            hw = (25, 80)

    return hw

def clearScreen():
    os.system('clear')

def clearPreviousLine():
    """ 
    Moves the cursor up one line then erases the line using the width of the
    console. 
    """
    # Cursor up one line
    print "\x1b[1A",
    # Erase Line
    terminalWidth = get_terminal_width(sys.stdout)
    string = "\r%"+str(terminalWidth)+"s\r"
    print string % " " ,


def isOlderPython():
    """ Returns true if the python version is older than 2.6 """
    info = sys.version_info
    if info[0] >= 2 and info[1] >= 6:
        return False
    return True

def findApps(domain):
    foundApps = domain.apps
    return foundApps



def findWaveform(domain, waveform):
    """ 
    Finds a waveform with an ID or a name that matches the provided waveform 
    string in the domain provided. 
    
    Returns: 
        The waveform object or None if not found. 
    """
    for app in findApps(domain):
        if waveform and \
            (app._get_identifier() == waveform or \
            app.name.startswith(waveform)):
            return app


def getDomainManager(domainName):
    """ Attaches to the provided domain and returns a reference to it"""
    try:

        # If the domain is in a weird state, this can hang forever, so if attach
        # doesn't succeed in 30 seconds, timeout. 
        timeout = 30
        waitingForDomain=True
        def timoutHandler(signum, frame):
            if waitingForDomain:
                raise Exception("Timeout waiting for Domain attach.")
        signal.signal(signal.SIGALRM, timoutHandler)
        signal.alarm(timeout)

        # Attach to domain
        domain = redhawk.base.attach(domainName)

        # we got the domain, so no longer need the timeout
        waitingForDomain = False

        return domain
    except Exception, e:
        try:
            print >> sys.stderr, "ERROR: Failed to connect to Domain Manager. " \
                    + str(e.msg)
        except:
            print >> sys.stderr, "ERROR: Failed to connect to Domain Manager. " \
                    + str(e)
        sys.exit(1)

def listAvailableDomains():
    """ Prints a list of all available domains """
    domains = redhawk.base.scan()
    print "\nAvailable Domains: "
    for domain in domains:
        print "\t"+domain


def getAvailableDomains():
    return redhawk.base.scan()

#####################################################################
# 
# Create Operation
# 
#####################################################################

def createWaveform(dom, opts):
    waveformInstanceName = opts.waveformInstanceName
    waveformURI = opts.waveformURI
    if not waveformURI:
	waveformURI = "/waveforms/" + waveformInstanceName + "/" + waveformInstanceName + ".sad.xml"

    app = None
    appFact = getAppFactory(dom, waveURI=waveformURI)
    if not appFact: 
        try: 
            dom.installApplication(waveformURI)
            appFact = getAppFactory(dom, waveURI=waveformURI)
	except:
	    appFact = None

    if not appFact:
        print >>sys.stderr, "Failed to get/install application factory for waveform: " + waveformURI
        sys.exit(2); 


    try:
        
	try:
	    print "Calling create with waveform ID: " + str(waveformInstanceName)
	    app = appFact.create(waveformInstanceName,[],[])
	except Exception, e: 
	    print >>sys.stderr, "ERROR:: Failed to launch waveform " + str(waveformInstanceName) + " with error " + str(e.msg)
	    raise
	except:
	    print >>sys.stderr, "ERROR:: Failed to launch waveform " + str(waveformInstanceName)
	    raise

	try:
	    app.start()
	except Exception, e: 
	    print >>sys.stderr, "ERROR:: Failed to start waveform " + str(waveformInstanceName) + " with error " + str(e.msg)
	    raise
	except:
	    print >>sys.stderr, "ERROR:: Failed to start waveform " + str(waveformInstanceName)
	    raise
    except:
        try:
	    if app: 
	        app.releaseObject()
	except Exception, e: 
	    print >>sys.stderr, "ERROR:: Failed to release waveform " + str(waveformInstanceName) + " with error " + str(e.msg)
	except:
	    print >>sys.stderr, "ERROR:: Failed to release waveform " + str(waveformInstanceName)
	sys.exit(1)
    waveformID = app._get_identifier()
    print "Waveform: " + str(waveformInstanceName) + " launched successfully with id: " + str(waveformID)


def getAppFactory(dom, waveInstanceName=None, waveAppID=None, waveURI=None):
    try:
        appfacs = dom._get_applicationFactories()
        for entry in appfacs:
	    if waveInstanceName and waveInstanceName == entry._get_name():
		return entry
            if waveAppID and waveAppID == entry._get_identifier():
		return entry
            if waveURI and waveURI == entry._get_softwareProfile():
		return entry
    except Exception, e:
        print >>sys.stderr, \
                "ERROR finding Application Factory: Failed with exception " \
                + str(e.msg)
        return None

#####################################################################
# 
# Remove Operation
# 
#####################################################################

def removeWaveform(dom, opts): 
    waveformInstanceName = opts.waveformInstanceName

    waveform = None
    for app in dom.apps: 
        if app._get_name() == waveformInstanceName: 
            waveform = app
            print "Releasing waveform " + str(waveformInstanceName) + ". Please wait..."
            waveform.releaseObject()
            print "Waveform ID: " + str(waveformInstanceName) + " has been successfully released"

    if not waveform: 
        print >>sys.stderr, "Waveform  " + str(waveformInstanceName) \
                + " can NOT be found (is not currently running)!"
        sys.exit(2)

#####################################################################
# 
# Status Operation
# 
#####################################################################

def showStatus(dom, opts): 
    """ Prints out the status of the selected waveform, or available waveforms
    if none is given, in the provided dom. """

    waveformInstanceName = opts.waveformInstanceName
    waveformInstanceName = opts.waveformInstanceName
    if not waveformInstanceName and not waveformInstanceName: 
        listAllAvailableWaveforms(dom)
    else: 
        found = False
	wave = findWaveform(dom, waveformInstanceName)
        for app in dom.apps: 
	    if waveformInstanceName and app.name.startswith(waveformInstanceName): 
                displayWaveformStatus(opts, app, waveformInstanceName) 
                found = True

        if not found: 
	    displayWaveformStatus(opts, None, waveformInstanceName)
	    sys.exit(2)


def listAllAvailableWaveforms(dom): 
    """ Prints a list of all waveforms in the provided dom. """

    waveforms = ""
    for app in dom.apps: 
        waveforms += "\t"+app.name + " " + app._get_identifier() + "\n"

    if waveforms == "": 
        waveforms = "\tNone Found"
    
    print "Running Waveforms in " + dom.name + ":"
    print waveforms

def displayWaveformStatus(opts, waveform, waveformInstanceName, waveformID=None ): 
    running = False
    status = "Not Running"

    if waveform: 
        running = True
        status = "Running"
        waveformInstanceName = waveform.name
        waveformID = waveform._get_identifier()
    
    if not waveformInstanceName: 
        waveformInstanceName = "Unknown"

    if not waveformID: 
        waveformID = "Unknown"

    printDividerLine('=', 50)
    print "Name:\t" + waveformInstanceName
    print "Status:\t" + status
    print "ID:\t" + waveformID

    if running: 
        print "Components:"
        comps = waveform.comps
        for comp in comps: 
	    displayComponentStatus(opts, waveformInstanceName, comp)
            #if opts.component and (opts.component not in comp._get_identifier() and opts.component != comp.name): 
            #    pass # Don't print this component
            #else: 
            #    displayComponentStatus(opts, waveformInstanceName, comp)

def displayComponentStatus(opts, waveformInstanceName, comp): 
    """ Displays Component Information and properties"""
    compID = comp._get_identifier()
    if waveformInstanceName in str(compID): 
        compID = str(compID).split(':')[0]

    printDividerLine('-', 50)
    print compID 
    print "Started: " + str(comp._get_started())

    # Are we editing properties?
    if opts.editProperties: 
        editProperties(opts.editProperties, comp)
    # If the -p flag was given
    elif opts.properties: 
	comp.api(destfile=sys.stdout)
        #displayProperties(comp)
            
    print "" # new line

#####################################################################
# 
# Usage and Flags 
# 
#####################################################################

def processFlags(): 
    """ Get the flags from the command line and return the object with the 
    set flags"""

    operations=["create","remove","status"]

    # Set up usage, description, and other --help information
    usage = "usage: %prog [--help] [options]"

    description = "Interact with the REDHAWK domain by " 
    description += "creating a waveform, removing a waveform, or "
    description += "printing domain, waveform, and component status." 

    epilog = "Operations: \n"
    status = "status\tStatus prints out information about the domain "
    status += "or a waveform. If no domain name is provided, status prints out "
    status += "a list of available domains. If domain is provided, status "
    status += "prints a list of available waveforms in that domain. If domain "
    status += "name and waveform name or id are provided, a detailed status of "
    status += "that particular waveform is printed. Using a Component name in " 
    status += "addition to the waveform name will print the waveform status " 
    status += "and only the specified component status. No other components "
    status += "will be printed. "
    create = "create\tCreate creates a new waveform in the domain provided. "
    create += "Domain name and waveform name are required options when using "
    create += "this operation."
    remove = "remove\tRemove removes a waveform from the domain. Domain name "
    remove += "and waveform ID are required to remove a waveworm."

    tw = TextWrapper(initial_indent="\t", subsequent_indent="\t\t")
    epilog += tw.fill(status) + "\n"
    epilog += tw.fill(create) + "\n"
    epilog += tw.fill(remove) + "\n"

    # make the epilog not remove newlines
    OptionParser.format_epilog = lambda self, formatter: self.epilog

    # Create the parser
    if isOlderPython(): 
	    # OptionParser prior to 2.6 did not have epilog, so cram the info in the usage section
	    parser = OptionParser(usage=usage+"\n"+epilog, description=description)
    else: 
	    parser = OptionParser(usage=usage, description=description, epilog=epilog)

    # Add the flags
    parser.add_option('-d', '--domain-name', dest="domainName", 
            help="The domain name to attach to. Required for create and remove")
    parser.add_option('-w', '--waveform-instance-name', dest="waveformInstanceName", 
            help="The name of the waveform. Required for create mode")
    parser.add_option('-u', '--waveform-uri', dest="waveformURI", 
            help="The name of the waveform. Required for create mode")
    parser.add_option('-o','--operation', dest="operation", 
            help="The operation to perform. Options: "+", ".join(operations), 
            default="status", choices=operations)
    parser.add_option('-p','--properties', dest="properties", 
            help="When printing waveform status, lists all properties for " \
            + "the given waveform", 
            default=False, action="store_true")
    parser.add_option('-c','--component', dest="component", 
            help="When printing waveform status, prints only the provided "\
                    "component's information.")
    parser.add_option('-e','--edit', dest="editProperties", action="append", nargs=2, 
            help="Edits the provided property. To edit a property, waveform "\
                    + "name and component name must be provided. The property "\
                    + "will be changed via -e prop=value or -e prop.id=value. "\
                    + "Any number of properties can be changed at the same "\
                    + "time using multiple -e flags in a row. Properties can "\
                    + "only be changed when using the status operation.")

    # Parse
    (options, args) = parser.parse_args()
    verifyFlags(options, parser)
    
    return options

def verifyFlags(options, parser):
    """ Verifies the correct operations have the required information 
    to procede"""
    operation = options.operation.lower()

    if operation == "create" and \
            ((not options.waveformURI and not options.waveformInstanceName) or not options.domainName):
        parser.error("Create operation requires Domain Name and either Waveform Name or Waveform URI.")
        
    if operation == "remove" and \
            (not options.waveformInstanceName or not options.domainName):
        parser.error("Remove operation requires Domain Name and Waveform Instance Name")


    # If no flags were given print the help but continue on, since we want to
    # display a list of domains
    if not options.waveformInstanceName and not options.domainName: 
        parser.print_help()

#####################################################################
# 
# Main
# 
#####################################################################

def main():
    """ Load flags and run the provided operation. """

    opts = processFlags(); 

    runOperation(opts)
    sys.exit(0)

def runOperation(opts): 
    """ Runs the provided operation """

    operation = opts.operation.lower() 
    domainName = opts.domainName

    if operation == "status" and not domainName:
        # Status without domain lists available domains
        listAvailableDomains()
    else: 
        dom = getDomainManager(domainName)

        if operation == "create":
            createWaveform(dom, opts)
        elif operation == "remove":
            removeWaveform(dom, opts)
        elif operation == "status": 
            showStatus(dom, opts)
        else:
            print >> sys.stderr, "Invalid Operation: " + str(operation)
            sys.exit(1)

if __name__ == "__main__":
    main()
