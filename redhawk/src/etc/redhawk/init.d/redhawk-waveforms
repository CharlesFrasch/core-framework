#!/bin/bash
# chkconfig: 2345 95 5
# description: Starts and stops the REDHAWK Waveform Manager Service
# processname: WaveformManager
# pidfile: /var/run/redhawk/waveform-mgrs/[waveform_name].pid
### BEGIN INIT INFO
# Provides:         redhawk-waveforms
# Required-Start:    
# Required-Stop:     
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: redhawk-waveforms
# Description:       redhawk-waveforms
### END INIT INFO


# Source redhawk function library remap for other os
. /etc/redhawk/init.d/functions && import_os_functions

. /etc/redhawk/init.d/svc-functions

#
# Base service info
#
SVC_NAME="REDHAWK Waveform Service"

# if script contains extra cmd args use those as specific 
# domains to perform the operations against
filter_list=${@:2}


list() {

    waveform_cmd_pre

    echo "List Configurations ${SVC_NAME}"

    CFG_FILES=$(shopt -s nullglob dotglob; echo ${WAVEFORM_CONFIG_DIR}/[^.]*[^~])
    for cfg_file in ${CFG_FILES}
    do
	[[ $_rh_debug_ ]] && echo "Processing cfg: ${cfg_file}"

	unset section_list
	declare -a section_list

        load_cfg_sections $cfg_file

	for section in "${section_list[@]}"
	do
            unset cfg
	    declare -A cfg
            get_config_section "$cfg_file" "$section" "$waveform_cfg_defaults"

            waveform_name=$(resolve_item cfg "waveform_name")
            domain_name=$(resolve_item cfg "domain_name")
            not_in_list "$filter_list" "$waveform_name" && not_in_list "$filter_list" "$domain_name.$waveform_name" && continue

            printf "Domain: %s Waveform: %s \n"  "$domain_name" "$waveform_name"

	done
    done
}



config() {
    waveform_cmd_pre

    echo "Configuration ${SVC_NAME}"

    CFG_FILES=$(shopt -s nullglob dotglob; echo ${WAVEFORM_CONFIG_DIR}/[^.]*[^~])
    for cfg_file in ${CFG_FILES}
    do
	unset section_list
	declare -a section_list

        load_cfg_sections $cfg_file

	for section in "${section_list[@]}"
	do
            unset cfg
	    declare -A cfg
            get_config_section "$cfg_file" "$section" "$waveform_cfg_defaults"

            waveform_name=$(resolve_item cfg "waveform_name")
            domain_name=$(resolve_item cfg "domain_name")
            not_in_list "$filter_list" "$waveform_name" && not_in_list "$filter_list" "$domain_name.$waveform_name" && continue

	    local key
	    local kl=( ${!cfg[@]} )
	    IFS=$'\n' 
	    local kls=( $(echo -e "${kl[@]/%/\\n}" | sed -r -e 's/^ *//' -e '/^$/d' | sort) )
	    unset IFS
	    printf "\n\n --------- Processing Section: ${section} in CFG: ${cfg_file} -------------\n\n"
	    for key in "${kls[@]}"; do printf "%s=%s\n" ${key^^} ${cfg[$key]} ;  done
	done

    done
}


#
# Service State Functions
#
start() {

    waveform_cmd_pre

    echo "Starting ${SVC_NAME}"
    declare -i cnt=0
    CFG_FILES=$(shopt -s nullglob dotglob; echo ${WAVEFORM_CONFIG_DIR}/[^.]*[^~])
    for cfg_file in ${CFG_FILES}
    do
	unset section_list
	declare -a section_list
        load_cfg_sections $cfg_file
	for section in "${section_list[@]}"
	do
	    waveform_start_one "$cfg_file" "$section" "$filter_list"
	    retval=$?
            (( cnt ++ ))	    
	done	
    done

    rh_return $retval $cnt
    return $?
}

stop() {
    waveform_cmd_pre
    echo "Stopping ${SVC_NAME}(s)"
    retval=0
    declare -i cnt=0
    declare -a pid_files
    ! waveform_pid_files && return 0
    for pid_file in ${pid_files[@]};
    do
        unset exec_options
	waveform_id=$(waveform_from_pidfile $pid_file)
	domain_name=$(domain_from_pidfile $pid_file)
        not_in_list "$filter_list" "$waveform_id" && not_in_list "$filter_list" "$domain_name.$waveform_id" && continue

	declare -A exec_options
	declare -A cfg=()
        get_ini_section $pid_file "" 
        
        waveform_name=$(resolve_item cfg "waveform_name")
        section=$(resolve_item cfg "section")
        cfg_file=$(resolve_item cfg "cfg_file")
        unset cfg
	declare -A cfg=()
        if [[ $cfg_file ]];
        then
            get_config_section "$cfg_file" "$section" "$waveform_cfg_defaults"
            cfg["WAVEFORM_ID"]="$waveform_id"
            build_exec_options "$domain_name.$waveform_name"  "$pid_file"
            exec_options["RETAIN_ENVIRONMENT"]="true"
            [[ $_rh_debug_ ]] && declare -p cfg
            [[ $_rh_debug_ ]] && declare -p exec_options
        fi
           
        echo -n "Stopping $waveform_name: "
	if waveform_check_run "$pid_file"
	then
            rh_run_scripts "${cfg["STOP_PRE_SCRIPT"]}"

            waveform_operation "remove" "$domain_name" "$waveform_id" 
	    rh_success

            rh_run_scripts "${cfg["STOP_POST_SCRIPT"]}"

	    [ -f "$pid_file" ] && rm -f "$pid_file"

	else
	    retval=1		
	    rh_failure	
	fi
	
        rh_clean_env
        (( cnt++ ))
    done
    rh_return $retval $cnt
    return $?
}

stop_disabled_waveforms() {
    retval=0
    declare -a pid_files
    ! waveform_pid_files && return 0
    for pid_file in ${pid_files[@]};
    do
	waveform_id=$(waveform_from_pidfile "$pid_file")
	domain_name=$(domain_from_pidfile $pid_file)
        not_in_list "$filter_list" "$waveform_id" && not_in_list "$filter_list" "$domain_name.$waveform_id" && continue
        waveform_enabled "$domain_name.$waveform_name"
	if [[ $? -ne 0 ]]
	then
            waveform_stop_one "$pid_file" "$filter_list"
	fi
    done
    return 0
}



restart() {
    waveform_cmd_pre

    echo "Restarting ${SVC_NAME}(s)"

    # stop all running services
    stop

    # start all enabled services
    start
    return $?
}


refresh() {
    waveform_cmd_pre
    echo "Refreshing ${SVC_NAME}(s)"

    # stop all waveforms that are not enabled..
    stop_disabled_waveforms
    
    # startup all enabled waveforms that are not started
    start
    return $?
}

status() {
    waveform_cmd_pre

    echo "Status ${SVC_NAME}(s)"

    retval=0
    declare -i cnt=0
    declare -a pid_files
    ! waveform_pid_files && return $retval
    for pid_file in ${pid_files[@]};
    do
        unset cfg
        unset exec_options

	waveform_id=$(waveform_from_pidfile "$pid_file")
	domain_name=$(domain_from_pidfile "$pid_file")
        not_in_list "$filter_list" "$waveform_id" && not_in_list "$filter_list" "$domain_name.$waveform_id" && continue

	declare -A exec_options
	declare -A cfg
        get_ini_section $pid_file "" 
        waveform_name=$(resolve_item cfg "waveform_name")
        section=$(resolve_item cfg "section")
        cfg_file=$(resolve_item cfg "cfg_file")
        unset cfg
	declare -A cfg=()
        if [[ ! -z $cfg_file ]];
        then
            get_config_section "$cfg_file" "$section" "$waveform_cfg_defaults"
            cfg["WAVEFORM_ID"]="$waveform_id"
            build_exec_options "$domain_name.$waveform_name"   "$pid_file"
            exec_options["RETAIN_ENVIRONMENT"]="true"
            [[ $_rh_debug_ ]] && declare -p cfg
            [[ $_rh_debug_ ]] && declare -p exec_options
        fi

	echo -n "Status for $waveform_id: "
	if waveform_check_run "$pid_file"
	then
            [[ $_rh_debug_ ]] && declare -p exec_options
            waveform_operation "status" "$domain_name" "$waveform_id" "" "$1"
            if [[ $? == 0 ]] ;
            then    
	        rh_success
            else
	        rh_failure
            fi
	else
	    echo -n $" is stopped         "
	    [ -f "$pid_file" ] && rm -f "$pid_file"
	    retval=1
	    rh_failure
	fi
        
        rh_clean_env

        (( cnt++ ))
    done
    rh_return $retval $cnt
    return $?
}

status_verbose() {
    status "-p"
    return $retval
}





#
# Check if user has sufficient privledges
#
[[ $UID -ne 0 ]] && echo "User has insufficient privilege." && exit 4

case "$1" in
	
	start)
		start 
		;;
	stop)
		stop 
		;;
	refresh)
		refresh 
		;;
	restart)
		restart 
		;;
	status)
		status
		;;
	status_verbose)
		status_verbose
		;;
	config)
		config
		;;
	list)
		list
		;;
	*)
		echo $"Usage: $0 {start|stop|restart|refresh|status|status_verbose|config|list} [waveform name | domain name.waveform name ]"
		exit 1
esac

exit $?
