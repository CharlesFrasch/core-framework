#!/usr/bin/env python
#
# This file is protected by Copyright. Please refer to the COPYRIGHT file 
# distributed with this source distribution.
# 
# This file is part of REDHAWK core.
# 
# REDHAWK core is free software: you can redistribute it and/or modify it under 
# the terms of the GNU Lesser General Public License as published by the Free 
# Software Foundation, either version 3 of the License, or (at your option) any 
# later version.
# 
# REDHAWK core is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
# 
# You should have received a copy of the GNU Lesser General Public License 
# along with this program.  If not, see http://www.gnu.org/licenses/.
#


#
# Generated Thu Nov  4 15:01:55 2010 by generateDS.py version 1.17d.REDHAWK.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper:
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class _MemberSpec(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type(self): return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


#
# Data representation classes.
#

class devicepkg(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, id_=None, name=None, title=None, author=None, description=None, hwdeviceregistration=None):
        self.version = version
        self.id_ = id_
        self.name = name
        self.title = title
        if author is None:
            self.author = []
        else:
            self.author = author
        self.description = description
        self.hwdeviceregistration = hwdeviceregistration
    def factory(*args_, **kwargs_):
        if devicepkg.subclass:
            return devicepkg.subclass(*args_, **kwargs_)
        else:
            return devicepkg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    titleProp = property(get_title, set_title)
    def get_author(self): return self.author
    def set_author(self, author): self.author = author
    def add_author(self, value): self.author.append(value)
    def insert_author(self, index, value): self.author[index] = value
    authorProp = property(get_author, set_author)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_hwdeviceregistration(self): return self.hwdeviceregistration
    def set_hwdeviceregistration(self, hwdeviceregistration): self.hwdeviceregistration = hwdeviceregistration
    hwdeviceregistrationProp = property(get_hwdeviceregistration, set_hwdeviceregistration)
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    versionProp = property(get_version, set_version)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    id_Prop = property(get_id, set_id)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def export(self, outfile, level, namespace_='', name_='devicepkg', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='devicepkg')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='devicepkg'):
        if self.version is not None:
            outfile.write(' version=%s' % (self.format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        outfile.write(' id=%s' % (self.format_string(quote_attrib(self.id_).encode(ExternalEncoding), input_name='id'), ))
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='devicepkg'):
        if self.title is not None:
            showIndent(outfile, level)
            outfile.write('<%stitle>%s</%stitle>\n' % (namespace_, self.format_string(quote_xml(self.title).encode(ExternalEncoding), input_name='title'), namespace_))
        for author_ in self.author:
            author_.export(outfile, level, namespace_, name_='author')
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description')
        if self.hwdeviceregistration:
            self.hwdeviceregistration.export(outfile, level, namespace_, name_='hwdeviceregistration', )
    def hasContent_(self):
        if (
            self.title is not None or
            self.author is not None or
            self.description is not None or
            self.hwdeviceregistration is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='devicepkg'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version = %s,\n' % (self.version,))
        if self.id_ is not None:
            showIndent(outfile, level)
            outfile.write('id_ = %s,\n' % (self.id_,))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('title=%s,\n' % quote_python(self.title).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('author=[\n')
        level += 1
        for author in self.author:
            showIndent(outfile, level)
            outfile.write('model_.author(\n')
            author.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.description:
            showIndent(outfile, level)
            outfile.write('description=model_.description(\n')
            self.description.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.hwdeviceregistration:
            showIndent(outfile, level)
            outfile.write('hwdeviceregistration=model_.hwdeviceregistration(\n')
            self.hwdeviceregistration.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('version'):
            self.version = attrs.get('version').value
        if attrs.get('id'):
            self.id_ = attrs.get('id').value
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            title_ = ''
            for text__content_ in child_.childNodes:
                title_ += text__content_.nodeValue
            self.title = title_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'author':
            obj_ = author.factory()
            obj_.build(child_)
            self.author.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            obj_ = description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'hwdeviceregistration':
            obj_ = hwdeviceregistration.factory()
            obj_.build(child_)
            self.set_hwdeviceregistration(obj_)
# end class devicepkg


class author(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, company=None, webpage=None):
        if name is None:
            self.name = []
        else:
            self.name = name
        self.company = company
        self.webpage = webpage
    def factory(*args_, **kwargs_):
        if author.subclass:
            return author.subclass(*args_, **kwargs_)
        else:
            return author(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def add_name(self, value): self.name.append(value)
    def insert_name(self, index, value): self.name[index] = value
    nameProp = property(get_name, set_name)
    def get_company(self): return self.company
    def set_company(self, company): self.company = company
    companyProp = property(get_company, set_company)
    def get_webpage(self): return self.webpage
    def set_webpage(self, webpage): self.webpage = webpage
    webpageProp = property(get_webpage, set_webpage)
    def export(self, outfile, level, namespace_='', name_='author', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='author')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='author'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='author'):
        for name_ in self.name:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(name_).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.company is not None:
            showIndent(outfile, level)
            outfile.write('<%scompany>%s</%scompany>\n' % (namespace_, self.format_string(quote_xml(self.company).encode(ExternalEncoding), input_name='company'), namespace_))
        if self.webpage is not None:
            showIndent(outfile, level)
            outfile.write('<%swebpage>%s</%swebpage>\n' % (namespace_, self.format_string(quote_xml(self.webpage).encode(ExternalEncoding), input_name='webpage'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.company is not None or
            self.webpage is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='author'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('name=[\n')
        level += 1
        for name in self.name:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(name).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('company=%s,\n' % quote_python(self.company).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('webpage=%s,\n' % quote_python(self.webpage).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name.append(name_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'company':
            company_ = ''
            for text__content_ in child_.childNodes:
                company_ += text__content_.nodeValue
            self.company = company_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'webpage':
            webpage_ = ''
            for text__content_ in child_.childNodes:
                webpage_ += text__content_.nodeValue
            self.webpage = webpage_
# end class author


class hwdeviceregistration(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, id_=None, name=None, propertyfile=None, description=None, manufacturer=None, modelnumber=None, deviceclass=None, childhwdevice=None):
        self.version = version
        self.id_ = id_
        self.name = name
        self.propertyfile = propertyfile
        self.description = description
        self.manufacturer = manufacturer
        self.modelnumber = modelnumber
        self.deviceclass = deviceclass
        if childhwdevice is None:
            self.childhwdevice = []
        else:
            self.childhwdevice = childhwdevice
    def factory(*args_, **kwargs_):
        if hwdeviceregistration.subclass:
            return hwdeviceregistration.subclass(*args_, **kwargs_)
        else:
            return hwdeviceregistration(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_propertyfile(self): return self.propertyfile
    def set_propertyfile(self, propertyfile): self.propertyfile = propertyfile
    propertyfileProp = property(get_propertyfile, set_propertyfile)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_manufacturer(self): return self.manufacturer
    def set_manufacturer(self, manufacturer): self.manufacturer = manufacturer
    manufacturerProp = property(get_manufacturer, set_manufacturer)
    def get_modelnumber(self): return self.modelnumber
    def set_modelnumber(self, modelnumber): self.modelnumber = modelnumber
    modelnumberProp = property(get_modelnumber, set_modelnumber)
    def get_deviceclass(self): return self.deviceclass
    def set_deviceclass(self, deviceclass): self.deviceclass = deviceclass
    deviceclassProp = property(get_deviceclass, set_deviceclass)
    def get_childhwdevice(self): return self.childhwdevice
    def set_childhwdevice(self, childhwdevice): self.childhwdevice = childhwdevice
    def add_childhwdevice(self, value): self.childhwdevice.append(value)
    def insert_childhwdevice(self, index, value): self.childhwdevice[index] = value
    childhwdeviceProp = property(get_childhwdevice, set_childhwdevice)
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    versionProp = property(get_version, set_version)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    id_Prop = property(get_id, set_id)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def export(self, outfile, level, namespace_='', name_='hwdeviceregistration', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='hwdeviceregistration')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='hwdeviceregistration'):
        if self.version is not None:
            outfile.write(' version=%s' % (self.format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        outfile.write(' id=%s' % (self.format_string(quote_attrib(self.id_).encode(ExternalEncoding), input_name='id'), ))
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='hwdeviceregistration'):
        if self.propertyfile:
            self.propertyfile.export(outfile, level, namespace_, name_='propertyfile')
        if self.description:
            self.description.export(outfile, level, namespace_, name_='description', )
        if self.manufacturer is not None:
            showIndent(outfile, level)
            outfile.write('<%smanufacturer>%s</%smanufacturer>\n' % (namespace_, self.format_string(quote_xml(self.manufacturer).encode(ExternalEncoding), input_name='manufacturer'), namespace_))
        if self.modelnumber is not None:
            showIndent(outfile, level)
            outfile.write('<%smodelnumber>%s</%smodelnumber>\n' % (namespace_, self.format_string(quote_xml(self.modelnumber).encode(ExternalEncoding), input_name='modelnumber'), namespace_))
        if self.deviceclass:
            self.deviceclass.export(outfile, level, namespace_, name_='deviceclass', )
        for childhwdevice_ in self.childhwdevice:
            childhwdevice_.export(outfile, level, namespace_, name_='childhwdevice')
    def hasContent_(self):
        if (
            self.propertyfile is not None or
            self.description is not None or
            self.manufacturer is not None or
            self.modelnumber is not None or
            self.deviceclass is not None or
            self.childhwdevice is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='hwdeviceregistration'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version = %s,\n' % (self.version,))
        if self.id_ is not None:
            showIndent(outfile, level)
            outfile.write('id_ = %s,\n' % (self.id_,))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.propertyfile:
            showIndent(outfile, level)
            outfile.write('propertyfile=model_.propertyfile(\n')
            self.propertyfile.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.description:
            showIndent(outfile, level)
            outfile.write('description=model_.description(\n')
            self.description.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('manufacturer=%s,\n' % quote_python(self.manufacturer).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('modelnumber=%s,\n' % quote_python(self.modelnumber).encode(ExternalEncoding))
        if self.deviceclass:
            showIndent(outfile, level)
            outfile.write('deviceclass=model_.deviceclass(\n')
            self.deviceclass.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('childhwdevice=[\n')
        level += 1
        for childhwdevice in self.childhwdevice:
            showIndent(outfile, level)
            outfile.write('model_.childhwdevice(\n')
            childhwdevice.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('version'):
            self.version = attrs.get('version').value
        if attrs.get('id'):
            self.id_ = attrs.get('id').value
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'propertyfile':
            obj_ = propertyfile.factory()
            obj_.build(child_)
            self.set_propertyfile(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            obj_ = description.factory()
            obj_.build(child_)
            self.set_description(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'manufacturer':
            manufacturer_ = ''
            for text__content_ in child_.childNodes:
                manufacturer_ += text__content_.nodeValue
            self.manufacturer = manufacturer_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'modelnumber':
            modelnumber_ = ''
            for text__content_ in child_.childNodes:
                modelnumber_ += text__content_.nodeValue
            self.modelnumber = modelnumber_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'deviceclass':
            obj_ = deviceclass.factory()
            obj_.build(child_)
            self.set_deviceclass(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'childhwdevice':
            obj_ = childhwdevice.factory()
            obj_.build(child_)
            self.childhwdevice.append(obj_)
# end class hwdeviceregistration


class propertyfile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, localfile=None):
        self.type_ = type_
        self.localfile = localfile
    def factory(*args_, **kwargs_):
        if propertyfile.subclass:
            return propertyfile.subclass(*args_, **kwargs_)
        else:
            return propertyfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self): return self.localfile
    def set_localfile(self, localfile): self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    type_Prop = property(get_type, set_type)
    def export(self, outfile, level, namespace_='', name_='propertyfile', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='propertyfile')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='propertyfile'):
        if self.type_ is not None:
            outfile.write(' type=%s' % (self.format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='propertyfile'):
        if self.localfile:
            self.localfile.export(outfile, level, namespace_, name_='localfile', )
    def hasContent_(self):
        if (
            self.localfile is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='propertyfile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.localfile:
            showIndent(outfile, level)
            outfile.write('localfile=model_.localfile(\n')
            self.localfile.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'localfile':
            obj_ = localfile.factory()
            obj_.build(child_)
            self.set_localfile(obj_)
# end class propertyfile


class localfile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, valueOf_=''):
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if localfile.subclass:
            return localfile.subclass(*args_, **kwargs_)
        else:
            return localfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='localfile', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='localfile')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='localfile'):
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='localfile'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='localfile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class localfile


class deviceclass(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, classxx=None):
        if classxx is None:
            self.classxx = []
        else:
            self.classxx = classxx
    def factory(*args_, **kwargs_):
        if deviceclass.subclass:
            return deviceclass.subclass(*args_, **kwargs_)
        else:
            return deviceclass(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_class(self): return self.classxx
    def set_class(self, classxx): self.classxx = classxx
    def add_class(self, value): self.classxx.append(value)
    def insert_class(self, index, value): self.classxx[index] = value
    classProp = property(get_class, set_class)
    def export(self, outfile, level, namespace_='', name_='deviceclass', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='deviceclass')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='deviceclass'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='deviceclass'):
        for class_ in self.classxx:
            showIndent(outfile, level)
            outfile.write('<%sclass>%s</%sclass>\n' % (namespace_, self.format_string(quote_xml(class_).encode(ExternalEncoding), input_name='class'), namespace_))
    def hasContent_(self):
        if (
            self.classxx is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='deviceclass'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('class=[\n')
        level += 1
        for classxx in self.classxx:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(classxx).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'class':
            class_ = ''
            for text__content_ in child_.childNodes:
                class_ += text__content_.nodeValue
            self.classxx.append(class_)
# end class deviceclass


class childhwdevice(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, hwdeviceregistration=None, devicepkgref=None):
        self.hwdeviceregistration = hwdeviceregistration
        self.devicepkgref = devicepkgref
    def factory(*args_, **kwargs_):
        if childhwdevice.subclass:
            return childhwdevice.subclass(*args_, **kwargs_)
        else:
            return childhwdevice(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_hwdeviceregistration(self): return self.hwdeviceregistration
    def set_hwdeviceregistration(self, hwdeviceregistration): self.hwdeviceregistration = hwdeviceregistration
    hwdeviceregistrationProp = property(get_hwdeviceregistration, set_hwdeviceregistration)
    def get_devicepkgref(self): return self.devicepkgref
    def set_devicepkgref(self, devicepkgref): self.devicepkgref = devicepkgref
    devicepkgrefProp = property(get_devicepkgref, set_devicepkgref)
    def export(self, outfile, level, namespace_='', name_='childhwdevice', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='childhwdevice')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='childhwdevice'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='childhwdevice'):
        if self.hwdeviceregistration:
            self.hwdeviceregistration.export(outfile, level, namespace_, name_='hwdeviceregistration', )
        if self.devicepkgref:
            self.devicepkgref.export(outfile, level, namespace_, name_='devicepkgref', )
    def hasContent_(self):
        if (
            self.hwdeviceregistration is not None or
            self.devicepkgref is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='childhwdevice'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.hwdeviceregistration:
            showIndent(outfile, level)
            outfile.write('hwdeviceregistration=model_.hwdeviceregistration(\n')
            self.hwdeviceregistration.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.devicepkgref:
            showIndent(outfile, level)
            outfile.write('devicepkgref=model_.devicepkgref(\n')
            self.devicepkgref.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'hwdeviceregistration':
            obj_ = hwdeviceregistration.factory()
            obj_.build(child_)
            self.set_hwdeviceregistration(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'devicepkgref':
            obj_ = devicepkgref.factory()
            obj_.build(child_)
            self.set_devicepkgref(obj_)
# end class childhwdevice


class devicepkgref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, localfile=None):
        self.type_ = type_
        self.localfile = localfile
    def factory(*args_, **kwargs_):
        if devicepkgref.subclass:
            return devicepkgref.subclass(*args_, **kwargs_)
        else:
            return devicepkgref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self): return self.localfile
    def set_localfile(self, localfile): self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    type_Prop = property(get_type, set_type)
    def export(self, outfile, level, namespace_='', name_='devicepkgref', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='devicepkgref')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='devicepkgref'):
        if self.type_ is not None:
            outfile.write(' type=%s' % (self.format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='devicepkgref'):
        if self.localfile:
            self.localfile.export(outfile, level, namespace_, name_='localfile', )
    def hasContent_(self):
        if (
            self.localfile is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='devicepkgref'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.localfile:
            showIndent(outfile, level)
            outfile.write('localfile=model_.localfile(\n')
            self.localfile.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'localfile':
            obj_ = localfile.factory()
            obj_.build(child_)
            self.set_localfile(obj_)
# end class devicepkgref


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
Options:
    -s        Use the SAX parser, not the minidom parser.
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = devicepkg.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="devicepkg", 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = devicepkg.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="devicepkg",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = devicepkg.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('from dpd import *\n\n')
##     sys.stdout.write('rootObj = devicepkg(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_="devicepkg")
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    main()
    #import pdb
    #pdb.run('main()')

