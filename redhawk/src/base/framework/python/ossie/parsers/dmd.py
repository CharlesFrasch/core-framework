#!/usr/bin/env python
#
# This file is protected by Copyright. Please refer to the COPYRIGHT file 
# distributed with this source distribution.
# 
# This file is part of REDHAWK core.
# 
# REDHAWK core is free software: you can redistribute it and/or modify it under 
# the terms of the GNU Lesser General Public License as published by the Free 
# Software Foundation, either version 3 of the License, or (at your option) any 
# later version.
# 
# REDHAWK core is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
# 
# You should have received a copy of the GNU Lesser General Public License 
# along with this program.  If not, see http://www.gnu.org/licenses/.
#


#
# Generated Thu Nov  4 15:01:54 2010 by generateDS.py version 1.17d.REDHAWK.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper:
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class _MemberSpec(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type(self): return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


#
# Data representation classes.
#

class domainmanagerconfiguration(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id_=None, name=None, description=None, domainmanagersoftpkg=None, services=None):
        self.id_ = id_
        self.name = name
        self.description = description
        self.domainmanagersoftpkg = domainmanagersoftpkg
        self.services = services
    def factory(*args_, **kwargs_):
        if domainmanagerconfiguration.subclass:
            return domainmanagerconfiguration.subclass(*args_, **kwargs_)
        else:
            return domainmanagerconfiguration(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_domainmanagersoftpkg(self): return self.domainmanagersoftpkg
    def set_domainmanagersoftpkg(self, domainmanagersoftpkg): self.domainmanagersoftpkg = domainmanagersoftpkg
    domainmanagersoftpkgProp = property(get_domainmanagersoftpkg, set_domainmanagersoftpkg)
    def get_services(self): return self.services
    def set_services(self, services): self.services = services
    servicesProp = property(get_services, set_services)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    id_Prop = property(get_id, set_id)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def export(self, outfile, level, namespace_='', name_='domainmanagerconfiguration', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='domainmanagerconfiguration')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='domainmanagerconfiguration'):
        outfile.write(' id=%s' % (self.format_string(quote_attrib(self.id_).encode(ExternalEncoding), input_name='id'), ))
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='domainmanagerconfiguration'):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
        if self.domainmanagersoftpkg:
            self.domainmanagersoftpkg.export(outfile, level, namespace_, name_='domainmanagersoftpkg', )
        if self.services:
            self.services.export(outfile, level, namespace_, name_='services')
    def hasContent_(self):
        if (
            self.description is not None or
            self.domainmanagersoftpkg is not None or
            self.services is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='domainmanagerconfiguration'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.id_ is not None:
            showIndent(outfile, level)
            outfile.write('id_ = %s,\n' % (self.id_,))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
        if self.domainmanagersoftpkg:
            showIndent(outfile, level)
            outfile.write('domainmanagersoftpkg=model_.domainmanagersoftpkg(\n')
            self.domainmanagersoftpkg.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.services:
            showIndent(outfile, level)
            outfile.write('services=model_.services(\n')
            self.services.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('id'):
            self.id_ = attrs.get('id').value
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            description_ = ''
            for text__content_ in child_.childNodes:
                description_ += text__content_.nodeValue
            self.description = description_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'domainmanagersoftpkg':
            obj_ = domainmanagersoftpkg.factory()
            obj_.build(child_)
            self.set_domainmanagersoftpkg(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'services':
            obj_ = services.factory()
            obj_.build(child_)
            self.set_services(obj_)
# end class domainmanagerconfiguration


class domainmanagersoftpkg(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, localfile=None):
        self.localfile = localfile
    def factory(*args_, **kwargs_):
        if domainmanagersoftpkg.subclass:
            return domainmanagersoftpkg.subclass(*args_, **kwargs_)
        else:
            return domainmanagersoftpkg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self): return self.localfile
    def set_localfile(self, localfile): self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def export(self, outfile, level, namespace_='', name_='domainmanagersoftpkg', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='domainmanagersoftpkg')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='domainmanagersoftpkg'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='domainmanagersoftpkg'):
        if self.localfile:
            self.localfile.export(outfile, level, namespace_, name_='localfile', )
    def hasContent_(self):
        if (
            self.localfile is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='domainmanagersoftpkg'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.localfile:
            showIndent(outfile, level)
            outfile.write('localfile=model_.localfile(\n')
            self.localfile.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'localfile':
            obj_ = localfile.factory()
            obj_.build(child_)
            self.set_localfile(obj_)
# end class domainmanagersoftpkg


class localfile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, valueOf_=''):
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if localfile.subclass:
            return localfile.subclass(*args_, **kwargs_)
        else:
            return localfile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='localfile', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='localfile')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='localfile'):
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='localfile'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='localfile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class localfile


class services(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, service=None):
        if service is None:
            self.service = []
        else:
            self.service = service
    def factory(*args_, **kwargs_):
        if services.subclass:
            return services.subclass(*args_, **kwargs_)
        else:
            return services(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_service(self): return self.service
    def set_service(self, service): self.service = service
    def add_service(self, value): self.service.append(value)
    def insert_service(self, index, value): self.service[index] = value
    serviceProp = property(get_service, set_service)
    def export(self, outfile, level, namespace_='', name_='services', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='services')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='services'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='services'):
        for service_ in self.service:
            service_.export(outfile, level, namespace_, name_='service')
    def hasContent_(self):
        if (
            self.service is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='services'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('service=[\n')
        level += 1
        for service in self.service:
            showIndent(outfile, level)
            outfile.write('model_.service(\n')
            service.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'service':
            obj_ = service.factory()
            obj_.build(child_)
            self.service.append(obj_)
# end class services


class service(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, usesidentifier=None, findby=None):
        self.usesidentifier = usesidentifier
        self.findby = findby
    def factory(*args_, **kwargs_):
        if service.subclass:
            return service.subclass(*args_, **kwargs_)
        else:
            return service(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_usesidentifier(self): return self.usesidentifier
    def set_usesidentifier(self, usesidentifier): self.usesidentifier = usesidentifier
    usesidentifierProp = property(get_usesidentifier, set_usesidentifier)
    def get_findby(self): return self.findby
    def set_findby(self, findby): self.findby = findby
    findbyProp = property(get_findby, set_findby)
    def export(self, outfile, level, namespace_='', name_='service', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='service')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='service'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='service'):
        if self.usesidentifier is not None:
            showIndent(outfile, level)
            outfile.write('<%susesidentifier>%s</%susesidentifier>\n' % (namespace_, self.format_string(quote_xml(self.usesidentifier).encode(ExternalEncoding), input_name='usesidentifier'), namespace_))
        if self.findby:
            self.findby.export(outfile, level, namespace_, name_='findby', )
    def hasContent_(self):
        if (
            self.usesidentifier is not None or
            self.findby is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='service'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('usesidentifier=%s,\n' % quote_python(self.usesidentifier).encode(ExternalEncoding))
        if self.findby:
            showIndent(outfile, level)
            outfile.write('findby=model_.findby(\n')
            self.findby.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'usesidentifier':
            usesidentifier_ = ''
            for text__content_ in child_.childNodes:
                usesidentifier_ += text__content_.nodeValue
            self.usesidentifier = usesidentifier_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'findby':
            obj_ = findby.factory()
            obj_.build(child_)
            self.set_findby(obj_)
# end class service


class findby(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, namingservice=None, stringifiedobjectref=None, domainfinder=None):
        self.namingservice = namingservice
        self.stringifiedobjectref = stringifiedobjectref
        self.domainfinder = domainfinder
    def factory(*args_, **kwargs_):
        if findby.subclass:
            return findby.subclass(*args_, **kwargs_)
        else:
            return findby(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_namingservice(self): return self.namingservice
    def set_namingservice(self, namingservice): self.namingservice = namingservice
    namingserviceProp = property(get_namingservice, set_namingservice)
    def get_stringifiedobjectref(self): return self.stringifiedobjectref
    def set_stringifiedobjectref(self, stringifiedobjectref): self.stringifiedobjectref = stringifiedobjectref
    stringifiedobjectrefProp = property(get_stringifiedobjectref, set_stringifiedobjectref)
    def get_domainfinder(self): return self.domainfinder
    def set_domainfinder(self, domainfinder): self.domainfinder = domainfinder
    domainfinderProp = property(get_domainfinder, set_domainfinder)
    def export(self, outfile, level, namespace_='', name_='findby', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='findby')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='findby'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='findby'):
        if self.namingservice:
            self.namingservice.export(outfile, level, namespace_, name_='namingservice', )
        if self.stringifiedobjectref is not None:
            showIndent(outfile, level)
            outfile.write('<%sstringifiedobjectref>%s</%sstringifiedobjectref>\n' % (namespace_, self.format_string(quote_xml(self.stringifiedobjectref).encode(ExternalEncoding), input_name='stringifiedobjectref'), namespace_))
        if self.domainfinder:
            self.domainfinder.export(outfile, level, namespace_, name_='domainfinder', )
    def hasContent_(self):
        if (
            self.namingservice is not None or
            self.stringifiedobjectref is not None or
            self.domainfinder is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='findby'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.namingservice:
            showIndent(outfile, level)
            outfile.write('namingservice=model_.namingservice(\n')
            self.namingservice.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('stringifiedobjectref=%s,\n' % quote_python(self.stringifiedobjectref).encode(ExternalEncoding))
        if self.domainfinder:
            showIndent(outfile, level)
            outfile.write('domainfinder=model_.domainfinder(\n')
            self.domainfinder.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'namingservice':
            obj_ = namingservice.factory()
            obj_.build(child_)
            self.set_namingservice(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'stringifiedobjectref':
            stringifiedobjectref_ = ''
            for text__content_ in child_.childNodes:
                stringifiedobjectref_ += text__content_.nodeValue
            self.stringifiedobjectref = stringifiedobjectref_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'domainfinder':
            obj_ = domainfinder.factory()
            obj_.build(child_)
            self.set_domainfinder(obj_)
# end class findby


class namingservice(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, valueOf_=''):
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if namingservice.subclass:
            return namingservice.subclass(*args_, **kwargs_)
        else:
            return namingservice(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='namingservice', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='namingservice')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='namingservice'):
        outfile.write(' name=%s' % (quote_attrib(self.name), ))
    def exportChildren(self, outfile, level, namespace_='', name_='namingservice'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='namingservice'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class namingservice


class domainfinder(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, name=None, valueOf_=''):
        self.type_ = type_
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if domainfinder.subclass:
            return domainfinder.subclass(*args_, **kwargs_)
        else:
            return domainfinder(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    type_Prop = property(get_type, set_type)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='domainfinder', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='domainfinder')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='domainfinder'):
        outfile.write(' type=%s' % (self.format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.name is not None:
            outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='domainfinder'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='domainfinder'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class domainfinder


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
Options:
    -s        Use the SAX parser, not the minidom parser.
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = domainmanagerconfiguration.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="domainmanagerconfiguration", 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = domainmanagerconfiguration.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="domainmanagerconfiguration",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = domainmanagerconfiguration.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('from dmd import *\n\n')
##     sys.stdout.write('rootObj = domainmanagerconfiguration(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_="domainmanagerconfiguration")
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    main()
    #import pdb
    #pdb.run('main()')

