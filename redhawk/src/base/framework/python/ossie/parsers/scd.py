#!/usr/bin/env python
#
# This file is protected by Copyright. Please refer to the COPYRIGHT file 
# distributed with this source distribution.
# 
# This file is part of REDHAWK core.
# 
# REDHAWK core is free software: you can redistribute it and/or modify it under 
# the terms of the GNU Lesser General Public License as published by the Free 
# Software Foundation, either version 3 of the License, or (at your option) any 
# later version.
# 
# REDHAWK core is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
# 
# You should have received a copy of the GNU Lesser General Public License 
# along with this program.  If not, see http://www.gnu.org/licenses/.
#


#
# Generated Thu Nov  4 15:01:55 2010 by generateDS.py version 1.17d.REDHAWK.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper:
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class _MemberSpec(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type(self): return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


#
# Data representation classes.
#

class softwarecomponent(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, corbaversion=None, componentrepid=None, componenttype=None, componentfeatures=None, interfaces=None, propertyfile=None):
        self.corbaversion = corbaversion
        self.componentrepid = componentrepid
        self.componenttype = componenttype
        self.componentfeatures = componentfeatures
        self.interfaces = interfaces
        self.propertyfile = propertyfile
    def factory(*args_, **kwargs_):
        if softwarecomponent.subclass:
            return softwarecomponent.subclass(*args_, **kwargs_)
        else:
            return softwarecomponent(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_corbaversion(self): return self.corbaversion
    def set_corbaversion(self, corbaversion): self.corbaversion = corbaversion
    corbaversionProp = property(get_corbaversion, set_corbaversion)
    def get_componentrepid(self): return self.componentrepid
    def set_componentrepid(self, componentrepid): self.componentrepid = componentrepid
    componentrepidProp = property(get_componentrepid, set_componentrepid)
    def get_componenttype(self): return self.componenttype
    def set_componenttype(self, componenttype): self.componenttype = componenttype
    componenttypeProp = property(get_componenttype, set_componenttype)
    def get_componentfeatures(self): return self.componentfeatures
    def set_componentfeatures(self, componentfeatures): self.componentfeatures = componentfeatures
    componentfeaturesProp = property(get_componentfeatures, set_componentfeatures)
    def get_interfaces(self): return self.interfaces
    def set_interfaces(self, interfaces): self.interfaces = interfaces
    interfacesProp = property(get_interfaces, set_interfaces)
    def get_propertyfile(self): return self.propertyfile
    def set_propertyfile(self, propertyfile): self.propertyfile = propertyfile
    propertyfileProp = property(get_propertyfile, set_propertyfile)
    def export(self, outfile, level, namespace_='', name_='softwarecomponent', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='softwarecomponent')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='softwarecomponent'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='softwarecomponent'):
        if self.corbaversion is not None:
            showIndent(outfile, level)
            outfile.write('<%scorbaversion>%s</%scorbaversion>\n' % (namespace_, self.format_string(quote_xml(self.corbaversion).encode(ExternalEncoding), input_name='corbaversion'), namespace_))
        if self.componentrepid:
            self.componentrepid.export(outfile, level, namespace_, name_='componentrepid', )
        if self.componenttype is not None:
            showIndent(outfile, level)
            outfile.write('<%scomponenttype>%s</%scomponenttype>\n' % (namespace_, self.format_string(quote_xml(self.componenttype).encode(ExternalEncoding), input_name='componenttype'), namespace_))
        if self.componentfeatures:
            self.componentfeatures.export(outfile, level, namespace_, name_='componentfeatures', )
        if self.interfaces:
            self.interfaces.export(outfile, level, namespace_, name_='interfaces', )
        if self.propertyfile:
            self.propertyfile.export(outfile, level, namespace_, name_='propertyfile')
    def hasContent_(self):
        if (
            self.corbaversion is not None or
            self.componentrepid is not None or
            self.componenttype is not None or
            self.componentfeatures is not None or
            self.interfaces is not None or
            self.propertyfile is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='softwarecomponent'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('corbaversion=%s,\n' % quote_python(self.corbaversion).encode(ExternalEncoding))
        if self.componentrepid:
            showIndent(outfile, level)
            outfile.write('componentrepid=model_.componentRepId(\n')
            self.componentrepid.exportLiteral(outfile, level, name_='componentrepid')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('componenttype=%s,\n' % quote_python(self.componenttype).encode(ExternalEncoding))
        if self.componentfeatures:
            showIndent(outfile, level)
            outfile.write('componentfeatures=model_.componentFeatures(\n')
            self.componentfeatures.exportLiteral(outfile, level, name_='componentfeatures')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.interfaces:
            showIndent(outfile, level)
            outfile.write('interfaces=model_.interfaces(\n')
            self.interfaces.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.propertyfile:
            showIndent(outfile, level)
            outfile.write('propertyfile=model_.propertyFile(\n')
            self.propertyfile.exportLiteral(outfile, level, name_='propertyfile')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'corbaversion':
            corbaversion_ = ''
            for text__content_ in child_.childNodes:
                corbaversion_ += text__content_.nodeValue
            self.corbaversion = corbaversion_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'componentrepid':
            obj_ = componentRepId.factory()
            obj_.build(child_)
            self.set_componentrepid(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'componenttype':
            componenttype_ = ''
            for text__content_ in child_.childNodes:
                componenttype_ += text__content_.nodeValue
            self.componenttype = componenttype_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'componentfeatures':
            obj_ = componentFeatures.factory()
            obj_.build(child_)
            self.set_componentfeatures(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'interfaces':
            obj_ = interfaces.factory()
            obj_.build(child_)
            self.set_interfaces(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'propertyfile':
            obj_ = propertyFile.factory()
            obj_.build(child_)
            self.set_propertyfile(obj_)
# end class softwarecomponent


class propertyFile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, localfile=None):
        self.type_ = type_
        self.localfile = localfile
    def factory(*args_, **kwargs_):
        if propertyFile.subclass:
            return propertyFile.subclass(*args_, **kwargs_)
        else:
            return propertyFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self): return self.localfile
    def set_localfile(self, localfile): self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    type_Prop = property(get_type, set_type)
    def export(self, outfile, level, namespace_='', name_='propertyFile', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='propertyFile')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='propertyFile'):
        if self.type_ is not None:
            outfile.write(' type=%s' % (self.format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='propertyFile'):
        if self.localfile:
            self.localfile.export(outfile, level, namespace_, name_='localfile', )
    def hasContent_(self):
        if (
            self.localfile is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='propertyFile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.localfile:
            showIndent(outfile, level)
            outfile.write('localfile=model_.localFile(\n')
            self.localfile.exportLiteral(outfile, level, name_='localfile')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'localfile':
            obj_ = localFile.factory()
            obj_.build(child_)
            self.set_localfile(obj_)
# end class propertyFile


class localFile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, valueOf_=''):
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if localFile.subclass:
            return localFile.subclass(*args_, **kwargs_)
        else:
            return localFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='localFile', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='localFile')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='localFile'):
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='localFile'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='localFile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class localFile


class componentRepId(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, repid=None, valueOf_=''):
        self.repid = repid
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if componentRepId.subclass:
            return componentRepId.subclass(*args_, **kwargs_)
        else:
            return componentRepId(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_repid(self): return self.repid
    def set_repid(self, repid): self.repid = repid
    repidProp = property(get_repid, set_repid)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='componentRepId', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='componentRepId')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='componentRepId'):
        outfile.write(' repid=%s' % (self.format_string(quote_attrib(self.repid).encode(ExternalEncoding), input_name='repid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='componentRepId'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='componentRepId'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.repid is not None:
            showIndent(outfile, level)
            outfile.write('repid = %s,\n' % (self.repid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('repid'):
            self.repid = attrs.get('repid').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class componentRepId


class componentFeatures(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, supportsinterface=None, ports=None):
        if supportsinterface is None:
            self.supportsinterface = []
        else:
            self.supportsinterface = supportsinterface
        self.ports = ports
    def factory(*args_, **kwargs_):
        if componentFeatures.subclass:
            return componentFeatures.subclass(*args_, **kwargs_)
        else:
            return componentFeatures(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_supportsinterface(self): return self.supportsinterface
    def set_supportsinterface(self, supportsinterface): self.supportsinterface = supportsinterface
    def add_supportsinterface(self, value): self.supportsinterface.append(value)
    def insert_supportsinterface(self, index, value): self.supportsinterface[index] = value
    supportsinterfaceProp = property(get_supportsinterface, set_supportsinterface)
    def get_ports(self): return self.ports
    def set_ports(self, ports): self.ports = ports
    portsProp = property(get_ports, set_ports)
    def export(self, outfile, level, namespace_='', name_='componentFeatures', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='componentFeatures')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='componentFeatures'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='componentFeatures'):
        for supportsinterface_ in self.supportsinterface:
            supportsinterface_.export(outfile, level, namespace_, name_='supportsinterface')
        if self.ports:
            self.ports.export(outfile, level, namespace_, name_='ports', )
    def hasContent_(self):
        if (
            self.supportsinterface is not None or
            self.ports is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='componentFeatures'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('supportsinterface=[\n')
        level += 1
        for supportsinterface in self.supportsinterface:
            showIndent(outfile, level)
            outfile.write('model_.supportsinterface(\n')
            supportsinterface.exportLiteral(outfile, level, name_='supportsinterface')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.ports:
            showIndent(outfile, level)
            outfile.write('ports=model_.ports(\n')
            self.ports.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'supportsinterface':
            obj_ = supportsInterface.factory()
            obj_.build(child_)
            self.supportsinterface.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'ports':
            obj_ = ports.factory()
            obj_.build(child_)
            self.set_ports(obj_)
# end class componentFeatures


class supportsInterface(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, supportsname=None, repid=None, valueOf_=''):
        self.supportsname = supportsname
        self.repid = repid
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if supportsInterface.subclass:
            return supportsInterface.subclass(*args_, **kwargs_)
        else:
            return supportsInterface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_supportsname(self): return self.supportsname
    def set_supportsname(self, supportsname): self.supportsname = supportsname
    supportsnameProp = property(get_supportsname, set_supportsname)
    def get_repid(self): return self.repid
    def set_repid(self, repid): self.repid = repid
    repidProp = property(get_repid, set_repid)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='supportsInterface', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='supportsInterface')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='supportsInterface'):
        outfile.write(' supportsname=%s' % (self.format_string(quote_attrib(self.supportsname).encode(ExternalEncoding), input_name='supportsname'), ))
        outfile.write(' repid=%s' % (self.format_string(quote_attrib(self.repid).encode(ExternalEncoding), input_name='repid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='supportsInterface'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='supportsInterface'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.supportsname is not None:
            showIndent(outfile, level)
            outfile.write('supportsname = %s,\n' % (self.supportsname,))
        if self.repid is not None:
            showIndent(outfile, level)
            outfile.write('repid = %s,\n' % (self.repid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('supportsname'):
            self.supportsname = attrs.get('supportsname').value
        if attrs.get('repid'):
            self.repid = attrs.get('repid').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class supportsInterface


class ports(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, provides=None, uses=None):
        if provides is None:
            self.provides = []
        else:
            self.provides = provides
        if uses is None:
            self.uses = []
        else:
            self.uses = uses
    def factory(*args_, **kwargs_):
        if ports.subclass:
            return ports.subclass(*args_, **kwargs_)
        else:
            return ports(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_provides(self): return self.provides
    def set_provides(self, provides): self.provides = provides
    def add_provides(self, value): self.provides.append(value)
    def insert_provides(self, index, value): self.provides[index] = value
    providesProp = property(get_provides, set_provides)
    def get_uses(self): return self.uses
    def set_uses(self, uses): self.uses = uses
    def add_uses(self, value): self.uses.append(value)
    def insert_uses(self, index, value): self.uses[index] = value
    usesProp = property(get_uses, set_uses)
    def export(self, outfile, level, namespace_='', name_='ports', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='ports')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='ports'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='ports'):
        for provides_ in self.provides:
            provides_.export(outfile, level, namespace_, name_='provides')
        for uses_ in self.uses:
            uses_.export(outfile, level, namespace_, name_='uses')
    def hasContent_(self):
        if (
            self.provides is not None or
            self.uses is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ports'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('provides=[\n')
        level += 1
        for provides in self.provides:
            showIndent(outfile, level)
            outfile.write('model_.provides(\n')
            provides.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('uses=[\n')
        level += 1
        for uses in self.uses:
            showIndent(outfile, level)
            outfile.write('model_.uses(\n')
            uses.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'provides':
            obj_ = provides.factory()
            obj_.build(child_)
            self.provides.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'uses':
            obj_ = uses.factory()
            obj_.build(child_)
            self.uses.append(obj_)
# end class ports


class provides(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, providesname=None, repid=None, porttype=None):
        self.providesname = providesname
        self.repid = repid
        if porttype is None:
            self.porttype = []
        else:
            self.porttype = porttype
    def factory(*args_, **kwargs_):
        if provides.subclass:
            return provides.subclass(*args_, **kwargs_)
        else:
            return provides(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_porttype(self): return self.porttype
    def set_porttype(self, porttype): self.porttype = porttype
    def add_porttype(self, value): self.porttype.append(value)
    def insert_porttype(self, index, value): self.porttype[index] = value
    porttypeProp = property(get_porttype, set_porttype)
    def get_providesname(self): return self.providesname
    def set_providesname(self, providesname): self.providesname = providesname
    providesnameProp = property(get_providesname, set_providesname)
    def get_repid(self): return self.repid
    def set_repid(self, repid): self.repid = repid
    repidProp = property(get_repid, set_repid)
    def export(self, outfile, level, namespace_='', name_='provides', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='provides')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='provides'):
        outfile.write(' providesname=%s' % (self.format_string(quote_attrib(self.providesname).encode(ExternalEncoding), input_name='providesname'), ))
        outfile.write(' repid=%s' % (self.format_string(quote_attrib(self.repid).encode(ExternalEncoding), input_name='repid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='provides'):
        for porttype_ in self.porttype:
            porttype_.export(outfile, level, namespace_, name_='porttype')
    def hasContent_(self):
        if (
            self.porttype is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='provides'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.providesname is not None:
            showIndent(outfile, level)
            outfile.write('providesname = %s,\n' % (self.providesname,))
        if self.repid is not None:
            showIndent(outfile, level)
            outfile.write('repid = %s,\n' % (self.repid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('porttype=[\n')
        level += 1
        for porttype in self.porttype:
            showIndent(outfile, level)
            outfile.write('model_.porttype(\n')
            porttype.exportLiteral(outfile, level, name_='porttype')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('providesname'):
            self.providesname = attrs.get('providesname').value
        if attrs.get('repid'):
            self.repid = attrs.get('repid').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'porttype':
            obj_ = portType.factory()
            obj_.build(child_)
            self.porttype.append(obj_)
# end class provides


class uses(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, usesname=None, repid=None, porttype=None):
        self.usesname = usesname
        self.repid = repid
        if porttype is None:
            self.porttype = []
        else:
            self.porttype = porttype
    def factory(*args_, **kwargs_):
        if uses.subclass:
            return uses.subclass(*args_, **kwargs_)
        else:
            return uses(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_porttype(self): return self.porttype
    def set_porttype(self, porttype): self.porttype = porttype
    def add_porttype(self, value): self.porttype.append(value)
    def insert_porttype(self, index, value): self.porttype[index] = value
    porttypeProp = property(get_porttype, set_porttype)
    def get_usesname(self): return self.usesname
    def set_usesname(self, usesname): self.usesname = usesname
    usesnameProp = property(get_usesname, set_usesname)
    def get_repid(self): return self.repid
    def set_repid(self, repid): self.repid = repid
    repidProp = property(get_repid, set_repid)
    def export(self, outfile, level, namespace_='', name_='uses', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='uses')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='uses'):
        outfile.write(' usesname=%s' % (self.format_string(quote_attrib(self.usesname).encode(ExternalEncoding), input_name='usesname'), ))
        outfile.write(' repid=%s' % (self.format_string(quote_attrib(self.repid).encode(ExternalEncoding), input_name='repid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='uses'):
        for porttype_ in self.porttype:
            porttype_.export(outfile, level, namespace_, name_='porttype')
    def hasContent_(self):
        if (
            self.porttype is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='uses'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.usesname is not None:
            showIndent(outfile, level)
            outfile.write('usesname = %s,\n' % (self.usesname,))
        if self.repid is not None:
            showIndent(outfile, level)
            outfile.write('repid = %s,\n' % (self.repid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('porttype=[\n')
        level += 1
        for porttype in self.porttype:
            showIndent(outfile, level)
            outfile.write('model_.porttype(\n')
            porttype.exportLiteral(outfile, level, name_='porttype')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('usesname'):
            self.usesname = attrs.get('usesname').value
        if attrs.get('repid'):
            self.repid = attrs.get('repid').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'porttype':
            obj_ = portType.factory()
            obj_.build(child_)
            self.porttype.append(obj_)
# end class uses


class portType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, valueOf_=''):
        self.type_ = type_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if portType.subclass:
            return portType.subclass(*args_, **kwargs_)
        else:
            return portType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    type_Prop = property(get_type, set_type)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='portType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='portType')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='portType'):
        outfile.write(' type=%s' % (quote_attrib(self.type_), ))
    def exportChildren(self, outfile, level, namespace_='', name_='portType'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='portType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class portType


class interfaces(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, interface=None):
        if interface is None:
            self.interface = []
        else:
            self.interface = interface
    def factory(*args_, **kwargs_):
        if interfaces.subclass:
            return interfaces.subclass(*args_, **kwargs_)
        else:
            return interfaces(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_interface(self): return self.interface
    def set_interface(self, interface): self.interface = interface
    def add_interface(self, value): self.interface.append(value)
    def insert_interface(self, index, value): self.interface[index] = value
    interfaceProp = property(get_interface, set_interface)
    def export(self, outfile, level, namespace_='', name_='interfaces', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='interfaces')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='interfaces'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='interfaces'):
        for interface_ in self.interface:
            interface_.export(outfile, level, namespace_, name_='interface')
    def hasContent_(self):
        if (
            self.interface is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='interfaces'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('interface=[\n')
        level += 1
        for interface in self.interface:
            showIndent(outfile, level)
            outfile.write('model_.interface(\n')
            interface.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'interface':
            obj_ = interface.factory()
            obj_.build(child_)
            self.interface.append(obj_)
# end class interfaces


class interface(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, repid=None, inheritsinterface=None):
        self.name = name
        self.repid = repid
        if inheritsinterface is None:
            self.inheritsinterface = []
        else:
            self.inheritsinterface = inheritsinterface
    def factory(*args_, **kwargs_):
        if interface.subclass:
            return interface.subclass(*args_, **kwargs_)
        else:
            return interface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_inheritsinterface(self): return self.inheritsinterface
    def set_inheritsinterface(self, inheritsinterface): self.inheritsinterface = inheritsinterface
    def add_inheritsinterface(self, value): self.inheritsinterface.append(value)
    def insert_inheritsinterface(self, index, value): self.inheritsinterface[index] = value
    inheritsinterfaceProp = property(get_inheritsinterface, set_inheritsinterface)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def get_repid(self): return self.repid
    def set_repid(self, repid): self.repid = repid
    repidProp = property(get_repid, set_repid)
    def export(self, outfile, level, namespace_='', name_='interface', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='interface')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='interface'):
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        outfile.write(' repid=%s' % (self.format_string(quote_attrib(self.repid).encode(ExternalEncoding), input_name='repid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='interface'):
        for inheritsinterface_ in self.inheritsinterface:
            inheritsinterface_.export(outfile, level, namespace_, name_='inheritsinterface')
    def hasContent_(self):
        if (
            self.inheritsinterface is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='interface'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
        if self.repid is not None:
            showIndent(outfile, level)
            outfile.write('repid = %s,\n' % (self.repid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('inheritsinterface=[\n')
        level += 1
        for inheritsinterface in self.inheritsinterface:
            showIndent(outfile, level)
            outfile.write('model_.inheritsinterface(\n')
            inheritsinterface.exportLiteral(outfile, level, name_='inheritsinterface')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('name'):
            self.name = attrs.get('name').value
        if attrs.get('repid'):
            self.repid = attrs.get('repid').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'inheritsinterface':
            obj_ = inheritsInterface.factory()
            obj_.build(child_)
            self.inheritsinterface.append(obj_)
# end class interface


class inheritsInterface(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, repid=None, valueOf_=''):
        self.repid = repid
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if inheritsInterface.subclass:
            return inheritsInterface.subclass(*args_, **kwargs_)
        else:
            return inheritsInterface(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_repid(self): return self.repid
    def set_repid(self, repid): self.repid = repid
    repidProp = property(get_repid, set_repid)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='inheritsInterface', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='inheritsInterface')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='inheritsInterface'):
        outfile.write(' repid=%s' % (self.format_string(quote_attrib(self.repid).encode(ExternalEncoding), input_name='repid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='inheritsInterface'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='inheritsInterface'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.repid is not None:
            showIndent(outfile, level)
            outfile.write('repid = %s,\n' % (self.repid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('repid'):
            self.repid = attrs.get('repid').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class inheritsInterface


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
Options:
    -s        Use the SAX parser, not the minidom parser.
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = softwarecomponent.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="softwarecomponent", 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = softwarecomponent.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="softwarecomponent",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = softwarecomponent.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('from scd import *\n\n')
##     sys.stdout.write('rootObj = softwarecomponent(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_="softwarecomponent")
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    main()
    #import pdb
    #pdb.run('main()')

