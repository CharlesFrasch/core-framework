#!/usr/bin/env python
#
# This file is protected by Copyright. Please refer to the COPYRIGHT file 
# distributed with this source distribution.
# 
# This file is part of REDHAWK core.
# 
# REDHAWK core is free software: you can redistribute it and/or modify it under 
# the terms of the GNU Lesser General Public License as published by the Free 
# Software Foundation, either version 3 of the License, or (at your option) any 
# later version.
# 
# REDHAWK core is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
# 
# You should have received a copy of the GNU Lesser General Public License 
# along with this program.  If not, see http://www.gnu.org/licenses/.
#


#
# Generated Tue May 24 22:38:50 2011 by generateDS.py version 1.17d.REDHAWK.
#

import sys
import getopt
from string import lower as str_lower
from xml.dom import minidom
from xml.dom import Node

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper:
        def format_string(self, input_data, input_name=''):
            return input_data
        def format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def format_boolean(self, input_data, input_name=''):
            return '%s' % input_data


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class _MemberSpec(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type(self): return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container


#
# Data representation classes.
#

class softPkg(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, type_=None, id_=None, name=None, title=None, author=None, description=None, propertyfile=None, descriptor=None, implementation=None, usesdevice=None):
        self.version = version
        self.type_ = type_
        self.id_ = id_
        self.name = name
        self.title = title
        if author is None:
            self.author = []
        else:
            self.author = author
        self.description = description
        self.propertyfile = propertyfile
        self.descriptor = descriptor
        if implementation is None:
            self.implementation = []
        else:
            self.implementation = implementation
        if usesdevice is None:
            self.usesdevice = []
        else:
            self.usesdevice = usesdevice
    def factory(*args_, **kwargs_):
        if softPkg.subclass:
            return softPkg.subclass(*args_, **kwargs_)
        else:
            return softPkg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_title(self): return self.title
    def set_title(self, title): self.title = title
    titleProp = property(get_title, set_title)
    def get_author(self): return self.author
    def set_author(self, author): self.author = author
    def add_author(self, value): self.author.append(value)
    def insert_author(self, index, value): self.author[index] = value
    authorProp = property(get_author, set_author)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_propertyfile(self): return self.propertyfile
    def set_propertyfile(self, propertyfile): self.propertyfile = propertyfile
    propertyfileProp = property(get_propertyfile, set_propertyfile)
    def get_descriptor(self): return self.descriptor
    def set_descriptor(self, descriptor): self.descriptor = descriptor
    descriptorProp = property(get_descriptor, set_descriptor)
    def get_implementation(self): return self.implementation
    def set_implementation(self, implementation): self.implementation = implementation
    def add_implementation(self, value): self.implementation.append(value)
    def insert_implementation(self, index, value): self.implementation[index] = value
    implementationProp = property(get_implementation, set_implementation)
    def get_usesdevice(self): return self.usesdevice
    def set_usesdevice(self, usesdevice): self.usesdevice = usesdevice
    def add_usesdevice(self, value): self.usesdevice.append(value)
    def insert_usesdevice(self, index, value): self.usesdevice[index] = value
    usesdeviceProp = property(get_usesdevice, set_usesdevice)
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    versionProp = property(get_version, set_version)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    type_Prop = property(get_type, set_type)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    id_Prop = property(get_id, set_id)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def export(self, outfile, level, namespace_='', name_='softPkg', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='softPkg')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='softPkg'):
        if self.version is not None:
            outfile.write(' version=%s' % (self.format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        outfile.write(' id=%s' % (self.format_string(quote_attrib(self.id_).encode(ExternalEncoding), input_name='id'), ))
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='softPkg'):
        if self.title is not None:
            showIndent(outfile, level)
            outfile.write('<%stitle>%s</%stitle>\n' % (namespace_, self.format_string(quote_xml(self.title).encode(ExternalEncoding), input_name='title'), namespace_))
        for author_ in self.author:
            author_.export(outfile, level, namespace_, name_='author')
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
        if self.propertyfile:
            self.propertyfile.export(outfile, level, namespace_, name_='propertyfile')
        if self.descriptor:
            self.descriptor.export(outfile, level, namespace_, name_='descriptor')
        for implementation_ in self.implementation:
            implementation_.export(outfile, level, namespace_, name_='implementation')
        for usesdevice_ in self.usesdevice:
            usesdevice_.export(outfile, level, namespace_, name_='usesdevice')
    def hasContent_(self):
        if (
            self.title is not None or
            self.author is not None or
            self.description is not None or
            self.propertyfile is not None or
            self.descriptor is not None or
            self.implementation is not None or
            self.usesdevice is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='softPkg'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version = %s,\n' % (self.version,))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
        if self.id_ is not None:
            showIndent(outfile, level)
            outfile.write('id_ = %s,\n' % (self.id_,))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('title=%s,\n' % quote_python(self.title).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('author=[\n')
        level += 1
        for author in self.author:
            showIndent(outfile, level)
            outfile.write('model_.author(\n')
            author.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
        if self.propertyfile:
            showIndent(outfile, level)
            outfile.write('propertyfile=model_.propertyFile(\n')
            self.propertyfile.exportLiteral(outfile, level, name_='propertyfile')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.descriptor:
            showIndent(outfile, level)
            outfile.write('descriptor=model_.descriptor(\n')
            self.descriptor.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('implementation=[\n')
        level += 1
        for implementation in self.implementation:
            showIndent(outfile, level)
            outfile.write('model_.implementation(\n')
            implementation.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('usesdevice=[\n')
        level += 1
        for usesdevice in self.usesdevice:
            showIndent(outfile, level)
            outfile.write('model_.usesdevice(\n')
            usesdevice.exportLiteral(outfile, level, name_='usesdevice')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('version'):
            self.version = attrs.get('version').value
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id_ = attrs.get('id').value
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'title':
            title_ = ''
            for text__content_ in child_.childNodes:
                title_ += text__content_.nodeValue
            self.title = title_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'author':
            obj_ = author.factory()
            obj_.build(child_)
            self.author.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            description_ = ''
            for text__content_ in child_.childNodes:
                description_ += text__content_.nodeValue
            self.description = description_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'propertyfile':
            obj_ = propertyFile.factory()
            obj_.build(child_)
            self.set_propertyfile(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'descriptor':
            obj_ = descriptor.factory()
            obj_.build(child_)
            self.set_descriptor(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'implementation':
            obj_ = implementation.factory()
            obj_.build(child_)
            self.implementation.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'usesdevice':
            obj_ = usesDevice.factory()
            obj_.build(child_)
            self.usesdevice.append(obj_)
# end class softPkg


class localFile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, valueOf_=''):
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if localFile.subclass:
            return localFile.subclass(*args_, **kwargs_)
        else:
            return localFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='localFile', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='localFile')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='localFile'):
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='localFile'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='localFile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class localFile


class propertyFile(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, localfile=None):
        self.type_ = type_
        self.localfile = localfile
    def factory(*args_, **kwargs_):
        if propertyFile.subclass:
            return propertyFile.subclass(*args_, **kwargs_)
        else:
            return propertyFile(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self): return self.localfile
    def set_localfile(self, localfile): self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    type_Prop = property(get_type, set_type)
    def export(self, outfile, level, namespace_='', name_='propertyFile', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='propertyFile')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='propertyFile'):
        if self.type_ is not None:
            outfile.write(' type=%s' % (self.format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='propertyFile'):
        if self.localfile:
            self.localfile.export(outfile, level, namespace_, name_='localfile', )
    def hasContent_(self):
        if (
            self.localfile is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='propertyFile'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.localfile:
            showIndent(outfile, level)
            outfile.write('localfile=model_.localFile(\n')
            self.localfile.exportLiteral(outfile, level, name_='localfile')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'localfile':
            obj_ = localFile.factory()
            obj_.build(child_)
            self.set_localfile(obj_)
# end class propertyFile


class author(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, company=None, webpage=None):
        if name is None:
            self.name = []
        else:
            self.name = name
        self.company = company
        self.webpage = webpage
    def factory(*args_, **kwargs_):
        if author.subclass:
            return author.subclass(*args_, **kwargs_)
        else:
            return author(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def add_name(self, value): self.name.append(value)
    def insert_name(self, index, value): self.name[index] = value
    nameProp = property(get_name, set_name)
    def get_company(self): return self.company
    def set_company(self, company): self.company = company
    companyProp = property(get_company, set_company)
    def get_webpage(self): return self.webpage
    def set_webpage(self, webpage): self.webpage = webpage
    webpageProp = property(get_webpage, set_webpage)
    def export(self, outfile, level, namespace_='', name_='author', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='author')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='author'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='author'):
        for name_ in self.name:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.format_string(quote_xml(name_).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.company is not None:
            showIndent(outfile, level)
            outfile.write('<%scompany>%s</%scompany>\n' % (namespace_, self.format_string(quote_xml(self.company).encode(ExternalEncoding), input_name='company'), namespace_))
        if self.webpage is not None:
            showIndent(outfile, level)
            outfile.write('<%swebpage>%s</%swebpage>\n' % (namespace_, self.format_string(quote_xml(self.webpage).encode(ExternalEncoding), input_name='webpage'), namespace_))
    def hasContent_(self):
        if (
            self.name is not None or
            self.company is not None or
            self.webpage is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='author'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('name=[\n')
        level += 1
        for name in self.name:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(name).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('company=%s,\n' % quote_python(self.company).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('webpage=%s,\n' % quote_python(self.webpage).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'name':
            name_ = ''
            for text__content_ in child_.childNodes:
                name_ += text__content_.nodeValue
            self.name.append(name_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'company':
            company_ = ''
            for text__content_ in child_.childNodes:
                company_ += text__content_.nodeValue
            self.company = company_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'webpage':
            webpage_ = ''
            for text__content_ in child_.childNodes:
                webpage_ += text__content_.nodeValue
            self.webpage = webpage_
# end class author


class descriptor(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, localfile=None):
        self.name = name
        self.localfile = localfile
    def factory(*args_, **kwargs_):
        if descriptor.subclass:
            return descriptor.subclass(*args_, **kwargs_)
        else:
            return descriptor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self): return self.localfile
    def set_localfile(self, localfile): self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def export(self, outfile, level, namespace_='', name_='descriptor', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='descriptor')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='descriptor'):
        if self.name is not None:
            outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='descriptor'):
        if self.localfile:
            self.localfile.export(outfile, level, namespace_, name_='localfile', )
    def hasContent_(self):
        if (
            self.localfile is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='descriptor'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.localfile:
            showIndent(outfile, level)
            outfile.write('localfile=model_.localFile(\n')
            self.localfile.exportLiteral(outfile, level, name_='localfile')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'localfile':
            obj_ = localFile.factory()
            obj_.build(child_)
            self.set_localfile(obj_)
# end class descriptor


class implementation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id_=None, aepcompliance=None, description=None, propertyfile=None, code=None, compiler=None, programminglanguage=None, humanlanguage=None, runtime=None, os=None, processor=None, dependency=None, usesdevice=None):
        self.id_ = id_
        self.aepcompliance = aepcompliance
        self.description = description
        self.propertyfile = propertyfile
        self.code = code
        self.compiler = compiler
        self.programminglanguage = programminglanguage
        self.humanlanguage = humanlanguage
        self.runtime = runtime
        if os is None:
            self.os = []
        else:
            self.os = os
        if processor is None:
            self.processor = []
        else:
            self.processor = processor
        if dependency is None:
            self.dependency = []
        else:
            self.dependency = dependency
        if usesdevice is None:
            self.usesdevice = []
        else:
            self.usesdevice = usesdevice
    def factory(*args_, **kwargs_):
        if implementation.subclass:
            return implementation.subclass(*args_, **kwargs_)
        else:
            return implementation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    descriptionProp = property(get_description, set_description)
    def get_propertyfile(self): return self.propertyfile
    def set_propertyfile(self, propertyfile): self.propertyfile = propertyfile
    propertyfileProp = property(get_propertyfile, set_propertyfile)
    def get_code(self): return self.code
    def set_code(self, code): self.code = code
    codeProp = property(get_code, set_code)
    def get_compiler(self): return self.compiler
    def set_compiler(self, compiler): self.compiler = compiler
    compilerProp = property(get_compiler, set_compiler)
    def get_programminglanguage(self): return self.programminglanguage
    def set_programminglanguage(self, programminglanguage): self.programminglanguage = programminglanguage
    programminglanguageProp = property(get_programminglanguage, set_programminglanguage)
    def get_humanlanguage(self): return self.humanlanguage
    def set_humanlanguage(self, humanlanguage): self.humanlanguage = humanlanguage
    humanlanguageProp = property(get_humanlanguage, set_humanlanguage)
    def get_runtime(self): return self.runtime
    def set_runtime(self, runtime): self.runtime = runtime
    runtimeProp = property(get_runtime, set_runtime)
    def get_os(self): return self.os
    def set_os(self, os): self.os = os
    def add_os(self, value): self.os.append(value)
    def insert_os(self, index, value): self.os[index] = value
    osProp = property(get_os, set_os)
    def get_processor(self): return self.processor
    def set_processor(self, processor): self.processor = processor
    def add_processor(self, value): self.processor.append(value)
    def insert_processor(self, index, value): self.processor[index] = value
    processorProp = property(get_processor, set_processor)
    def get_dependency(self): return self.dependency
    def set_dependency(self, dependency): self.dependency = dependency
    def add_dependency(self, value): self.dependency.append(value)
    def insert_dependency(self, index, value): self.dependency[index] = value
    dependencyProp = property(get_dependency, set_dependency)
    def get_usesdevice(self): return self.usesdevice
    def set_usesdevice(self, usesdevice): self.usesdevice = usesdevice
    def add_usesdevice(self, value): self.usesdevice.append(value)
    def insert_usesdevice(self, index, value): self.usesdevice[index] = value
    usesdeviceProp = property(get_usesdevice, set_usesdevice)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    id_Prop = property(get_id, set_id)
    def get_aepcompliance(self): return self.aepcompliance
    def set_aepcompliance(self, aepcompliance): self.aepcompliance = aepcompliance
    aepcomplianceProp = property(get_aepcompliance, set_aepcompliance)
    def export(self, outfile, level, namespace_='', name_='implementation', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='implementation')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='implementation'):
        outfile.write(' id=%s' % (self.format_string(quote_attrib(self.id_).encode(ExternalEncoding), input_name='id'), ))
        if self.aepcompliance is not None:
            outfile.write(' aepcompliance=%s' % (quote_attrib(self.aepcompliance), ))
    def exportChildren(self, outfile, level, namespace_='', name_='implementation'):
        if self.description is not None:
            showIndent(outfile, level)
            outfile.write('<%sdescription>%s</%sdescription>\n' % (namespace_, self.format_string(quote_xml(self.description).encode(ExternalEncoding), input_name='description'), namespace_))
        if self.propertyfile:
            self.propertyfile.export(outfile, level, namespace_, name_='propertyfile')
        if self.code:
            self.code.export(outfile, level, namespace_, name_='code', )
        if self.compiler:
            self.compiler.export(outfile, level, namespace_, name_='compiler')
        if self.programminglanguage:
            self.programminglanguage.export(outfile, level, namespace_, name_='programminglanguage')
        if self.humanlanguage:
            self.humanlanguage.export(outfile, level, namespace_, name_='humanlanguage')
        if self.runtime:
            self.runtime.export(outfile, level, namespace_, name_='runtime')
        for os_ in self.os:
            os_.export(outfile, level, namespace_, name_='os')
        for processor_ in self.processor:
            processor_.export(outfile, level, namespace_, name_='processor')
        for dependency_ in self.dependency:
            dependency_.export(outfile, level, namespace_, name_='dependency')
        for usesdevice_ in self.usesdevice:
            usesdevice_.export(outfile, level, namespace_, name_='usesdevice')
    def hasContent_(self):
        if (
            self.description is not None or
            self.propertyfile is not None or
            self.code is not None or
            self.compiler is not None or
            self.programminglanguage is not None or
            self.humanlanguage is not None or
            self.runtime is not None or
            self.os is not None or
            self.processor is not None or
            self.dependency is not None or
            self.usesdevice is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='implementation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.id_ is not None:
            showIndent(outfile, level)
            outfile.write('id_ = %s,\n' % (self.id_,))
        if self.aepcompliance is not None:
            showIndent(outfile, level)
            outfile.write('aepcompliance = %s,\n' % (self.aepcompliance,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('description=%s,\n' % quote_python(self.description).encode(ExternalEncoding))
        if self.propertyfile:
            showIndent(outfile, level)
            outfile.write('propertyfile=model_.propertyFile(\n')
            self.propertyfile.exportLiteral(outfile, level, name_='propertyfile')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.code:
            showIndent(outfile, level)
            outfile.write('code=model_.code(\n')
            self.code.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.compiler:
            showIndent(outfile, level)
            outfile.write('compiler=model_.compiler(\n')
            self.compiler.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.programminglanguage:
            showIndent(outfile, level)
            outfile.write('programminglanguage=model_.programmingLanguage(\n')
            self.programminglanguage.exportLiteral(outfile, level, name_='programminglanguage')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.humanlanguage:
            showIndent(outfile, level)
            outfile.write('humanlanguage=model_.humanLanguage(\n')
            self.humanlanguage.exportLiteral(outfile, level, name_='humanlanguage')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.runtime:
            showIndent(outfile, level)
            outfile.write('runtime=model_.runtime(\n')
            self.runtime.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('os=[\n')
        level += 1
        for os in self.os:
            showIndent(outfile, level)
            outfile.write('model_.os(\n')
            os.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('processor=[\n')
        level += 1
        for processor in self.processor:
            showIndent(outfile, level)
            outfile.write('model_.processor(\n')
            processor.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('dependency=[\n')
        level += 1
        for dependency in self.dependency:
            showIndent(outfile, level)
            outfile.write('model_.dependency(\n')
            dependency.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('usesdevice=[\n')
        level += 1
        for usesdevice in self.usesdevice:
            showIndent(outfile, level)
            outfile.write('model_.usesdevice(\n')
            usesdevice.exportLiteral(outfile, level, name_='usesdevice')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('id'):
            self.id_ = attrs.get('id').value
        if attrs.get('aepcompliance'):
            self.aepcompliance = attrs.get('aepcompliance').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'description':
            description_ = ''
            for text__content_ in child_.childNodes:
                description_ += text__content_.nodeValue
            self.description = description_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'propertyfile':
            obj_ = propertyFile.factory()
            obj_.build(child_)
            self.set_propertyfile(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'code':
            obj_ = code.factory()
            obj_.build(child_)
            self.set_code(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'compiler':
            obj_ = compiler.factory()
            obj_.build(child_)
            self.set_compiler(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'programminglanguage':
            obj_ = programmingLanguage.factory()
            obj_.build(child_)
            self.set_programminglanguage(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'humanlanguage':
            obj_ = humanLanguage.factory()
            obj_.build(child_)
            self.set_humanlanguage(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'runtime':
            obj_ = runtime.factory()
            obj_.build(child_)
            self.set_runtime(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'os':
            obj_ = os.factory()
            obj_.build(child_)
            self.os.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'processor':
            obj_ = processor.factory()
            obj_.build(child_)
            self.processor.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'dependency':
            obj_ = dependency.factory()
            obj_.build(child_)
            self.dependency.append(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'usesdevice':
            obj_ = usesDevice.factory()
            obj_.build(child_)
            self.usesdevice.append(obj_)
# end class implementation


class code(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, localfile=None, entrypoint=None, stacksize=None, priority=None):
        self.type_ = type_
        self.localfile = localfile
        self.entrypoint = entrypoint
        self.stacksize = stacksize
        self.priority = priority
    def factory(*args_, **kwargs_):
        if code.subclass:
            return code.subclass(*args_, **kwargs_)
        else:
            return code(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self): return self.localfile
    def set_localfile(self, localfile): self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def get_entrypoint(self): return self.entrypoint
    def set_entrypoint(self, entrypoint): self.entrypoint = entrypoint
    entrypointProp = property(get_entrypoint, set_entrypoint)
    def get_stacksize(self): return self.stacksize
    def set_stacksize(self, stacksize): self.stacksize = stacksize
    stacksizeProp = property(get_stacksize, set_stacksize)
    def get_priority(self): return self.priority
    def set_priority(self, priority): self.priority = priority
    priorityProp = property(get_priority, set_priority)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    type_Prop = property(get_type, set_type)
    def export(self, outfile, level, namespace_='', name_='code', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='code')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='code'):
        if self.type_ is not None:
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
    def exportChildren(self, outfile, level, namespace_='', name_='code'):
        if self.localfile:
            self.localfile.export(outfile, level, namespace_, name_='localfile', )
        if self.entrypoint is not None:
            showIndent(outfile, level)
            outfile.write('<%sentrypoint>%s</%sentrypoint>\n' % (namespace_, self.format_string(quote_xml(self.entrypoint).encode(ExternalEncoding), input_name='entrypoint'), namespace_))
        if self.stacksize is not None:
            showIndent(outfile, level)
            outfile.write('<%sstacksize>%s</%sstacksize>\n' % (namespace_, self.format_string(quote_xml(self.stacksize).encode(ExternalEncoding), input_name='stacksize'), namespace_))
        if self.priority is not None:
            showIndent(outfile, level)
            outfile.write('<%spriority>%s</%spriority>\n' % (namespace_, self.format_string(quote_xml(self.priority).encode(ExternalEncoding), input_name='priority'), namespace_))
    def hasContent_(self):
        if (
            self.localfile is not None or
            self.entrypoint is not None or
            self.stacksize is not None or
            self.priority is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='code'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.localfile:
            showIndent(outfile, level)
            outfile.write('localfile=model_.localFile(\n')
            self.localfile.exportLiteral(outfile, level, name_='localfile')
            showIndent(outfile, level)
            outfile.write('),\n')
        showIndent(outfile, level)
        outfile.write('entrypoint=%s,\n' % quote_python(self.entrypoint).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('stacksize=%s,\n' % quote_python(self.stacksize).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('priority=%s,\n' % quote_python(self.priority).encode(ExternalEncoding))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'localfile':
            obj_ = localFile.factory()
            obj_.build(child_)
            self.set_localfile(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'entrypoint':
            entrypoint_ = ''
            for text__content_ in child_.childNodes:
                entrypoint_ += text__content_.nodeValue
            self.entrypoint = entrypoint_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'stacksize':
            stacksize_ = ''
            for text__content_ in child_.childNodes:
                stacksize_ += text__content_.nodeValue
            self.stacksize = stacksize_
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'priority':
            priority_ = ''
            for text__content_ in child_.childNodes:
                priority_ += text__content_.nodeValue
            self.priority = priority_
# end class code


class compiler(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, name=None, valueOf_=''):
        self.version = version
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if compiler.subclass:
            return compiler.subclass(*args_, **kwargs_)
        else:
            return compiler(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    versionProp = property(get_version, set_version)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='compiler', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='compiler')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='compiler'):
        if self.version is not None:
            outfile.write(' version=%s' % (self.format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='compiler'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='compiler'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version = %s,\n' % (self.version,))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('version'):
            self.version = attrs.get('version').value
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class compiler


class programmingLanguage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, name=None, valueOf_=''):
        self.version = version
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if programmingLanguage.subclass:
            return programmingLanguage.subclass(*args_, **kwargs_)
        else:
            return programmingLanguage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    versionProp = property(get_version, set_version)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='programmingLanguage', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='programmingLanguage')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='programmingLanguage'):
        if self.version is not None:
            outfile.write(' version=%s' % (self.format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='programmingLanguage'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='programmingLanguage'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version = %s,\n' % (self.version,))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('version'):
            self.version = attrs.get('version').value
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class programmingLanguage


class humanLanguage(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, valueOf_=''):
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if humanLanguage.subclass:
            return humanLanguage.subclass(*args_, **kwargs_)
        else:
            return humanLanguage(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='humanLanguage', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='humanLanguage')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='humanLanguage'):
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='humanLanguage'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='humanLanguage'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class humanLanguage


class os(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, name=None, valueOf_=''):
        self.version = version
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if os.subclass:
            return os.subclass(*args_, **kwargs_)
        else:
            return os(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    versionProp = property(get_version, set_version)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='os', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='os')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='os'):
        if self.version is not None:
            outfile.write(' version=%s' % (self.format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='os'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='os'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version = %s,\n' % (self.version,))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('version'):
            self.version = attrs.get('version').value
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class os


class processor(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, valueOf_=''):
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if processor.subclass:
            return processor.subclass(*args_, **kwargs_)
        else:
            return processor(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='processor', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='processor')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='processor'):
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='processor'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='processor'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class processor


class dependency(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, softpkgref=None, propertyref=None, simpleref=None, simplesequenceref=None, structref=None, structsequenceref=None):
        self.type_ = type_
        self.softpkgref = softpkgref
        self.propertyref = propertyref
        self.simpleref = simpleref
        self.simplesequenceref = simplesequenceref
        self.structref = structref
        self.structsequenceref = structsequenceref
    def factory(*args_, **kwargs_):
        if dependency.subclass:
            return dependency.subclass(*args_, **kwargs_)
        else:
            return dependency(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_softpkgref(self): return self.softpkgref
    def set_softpkgref(self, softpkgref): self.softpkgref = softpkgref
    softpkgrefProp = property(get_softpkgref, set_softpkgref)
    def get_propertyref(self): return self.propertyref
    def set_propertyref(self, propertyref): self.propertyref = propertyref
    propertyrefProp = property(get_propertyref, set_propertyref)
    def get_simpleref(self): return self.simpleref
    def set_simpleref(self, simpleref): self.simpleref = simpleref
    simplerefProp = property(get_simpleref, set_simpleref)
    def get_simplesequenceref(self): return self.simplesequenceref
    def set_simplesequenceref(self, simplesequenceref): self.simplesequenceref = simplesequenceref
    simplesequencerefProp = property(get_simplesequenceref, set_simplesequenceref)
    def get_structref(self): return self.structref
    def set_structref(self, structref): self.structref = structref
    structrefProp = property(get_structref, set_structref)
    def get_structsequenceref(self): return self.structsequenceref
    def set_structsequenceref(self, structsequenceref): self.structsequenceref = structsequenceref
    structsequencerefProp = property(get_structsequenceref, set_structsequenceref)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    type_Prop = property(get_type, set_type)
    def export(self, outfile, level, namespace_='', name_='dependency', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='dependency')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='dependency'):
        outfile.write(' type=%s' % (self.format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='dependency'):
        if self.softpkgref:
            self.softpkgref.export(outfile, level, namespace_, name_='softpkgref', )
        if self.propertyref:
            self.propertyref.export(outfile, level, namespace_, name_='propertyref', )
        if self.simpleref:
            self.simpleref.export(outfile, level, namespace_, name_='simpleref', )
        if self.simplesequenceref:
            self.simplesequenceref.export(outfile, level, namespace_, name_='simplesequenceref', )
        if self.structref:
            self.structref.export(outfile, level, namespace_, name_='structref', )
        if self.structsequenceref:
            self.structsequenceref.export(outfile, level, namespace_, name_='structsequenceref', )
    def hasContent_(self):
        if (
            self.softpkgref is not None or
            self.propertyref is not None or
            self.simpleref is not None or
            self.simplesequenceref is not None or
            self.structref is not None or
            self.structsequenceref is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='dependency'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.softpkgref:
            showIndent(outfile, level)
            outfile.write('softpkgref=model_.softPkgRef(\n')
            self.softpkgref.exportLiteral(outfile, level, name_='softpkgref')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.propertyref:
            showIndent(outfile, level)
            outfile.write('propertyref=model_.propertyRef(\n')
            self.propertyref.exportLiteral(outfile, level, name_='propertyref')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.simpleref:
            showIndent(outfile, level)
            outfile.write('simpleref=model_.simpleref(\n')
            self.simpleref.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.simplesequenceref:
            showIndent(outfile, level)
            outfile.write('simplesequenceref=model_.simplesequenceref(\n')
            self.simplesequenceref.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.structref:
            showIndent(outfile, level)
            outfile.write('structref=model_.structref(\n')
            self.structref.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.structsequenceref:
            showIndent(outfile, level)
            outfile.write('structsequenceref=model_.structsequenceref(\n')
            self.structsequenceref.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'softpkgref':
            obj_ = softPkgRef.factory()
            obj_.build(child_)
            self.set_softpkgref(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'propertyref':
            obj_ = propertyRef.factory()
            obj_.build(child_)
            self.set_propertyref(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'simpleref':
            obj_ = simpleref.factory()
            obj_.build(child_)
            self.set_simpleref(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'simplesequenceref':
            obj_ = simplesequenceref.factory()
            obj_.build(child_)
            self.set_simplesequenceref(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'structref':
            obj_ = structref.factory()
            obj_.build(child_)
            self.set_structref(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'structsequenceref':
            obj_ = structsequenceref.factory()
            obj_.build(child_)
            self.set_structsequenceref(obj_)
# end class dependency


class runtime(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, version=None, name=None, valueOf_=''):
        self.version = version
        self.name = name
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if runtime.subclass:
            return runtime.subclass(*args_, **kwargs_)
        else:
            return runtime(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    versionProp = property(get_version, set_version)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    nameProp = property(get_name, set_name)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='runtime', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='runtime')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='runtime'):
        if self.version is not None:
            outfile.write(' version=%s' % (self.format_string(quote_attrib(self.version).encode(ExternalEncoding), input_name='version'), ))
        outfile.write(' name=%s' % (self.format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='runtime'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='runtime'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.version is not None:
            showIndent(outfile, level)
            outfile.write('version = %s,\n' % (self.version,))
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name = %s,\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('version'):
            self.version = attrs.get('version').value
        if attrs.get('name'):
            self.name = attrs.get('name').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class runtime


class propertyRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, value=None, valueOf_=''):
        self.refid = refid
        self.value = value
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if propertyRef.subclass:
            return propertyRef.subclass(*args_, **kwargs_)
        else:
            return propertyRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    refidProp = property(get_refid, set_refid)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    valueProp = property(get_value, set_value)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='propertyRef', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='propertyRef')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='propertyRef'):
        outfile.write(' refid=%s' % (self.format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
        outfile.write(' value=%s' % (self.format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='propertyRef'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='propertyRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.refid is not None:
            showIndent(outfile, level)
            outfile.write('refid = %s,\n' % (self.refid,))
        if self.value is not None:
            showIndent(outfile, level)
            outfile.write('value = %s,\n' % (self.value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('refid'):
            self.refid = attrs.get('refid').value
        if attrs.get('value'):
            self.value = attrs.get('value').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class propertyRef


class softPkgRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, localfile=None, implref=None):
        self.localfile = localfile
        self.implref = implref
    def factory(*args_, **kwargs_):
        if softPkgRef.subclass:
            return softPkgRef.subclass(*args_, **kwargs_)
        else:
            return softPkgRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_localfile(self): return self.localfile
    def set_localfile(self, localfile): self.localfile = localfile
    localfileProp = property(get_localfile, set_localfile)
    def get_implref(self): return self.implref
    def set_implref(self, implref): self.implref = implref
    implrefProp = property(get_implref, set_implref)
    def export(self, outfile, level, namespace_='', name_='softPkgRef', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='softPkgRef')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='softPkgRef'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='softPkgRef'):
        if self.localfile:
            self.localfile.export(outfile, level, namespace_, name_='localfile', )
        if self.implref:
            self.implref.export(outfile, level, namespace_, name_='implref')
    def hasContent_(self):
        if (
            self.localfile is not None or
            self.implref is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='softPkgRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        if self.localfile:
            showIndent(outfile, level)
            outfile.write('localfile=model_.localFile(\n')
            self.localfile.exportLiteral(outfile, level, name_='localfile')
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.implref:
            showIndent(outfile, level)
            outfile.write('implref=model_.implRef(\n')
            self.implref.exportLiteral(outfile, level, name_='implref')
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'localfile':
            obj_ = localFile.factory()
            obj_.build(child_)
            self.set_localfile(obj_)
        elif child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'implref':
            obj_ = implRef.factory()
            obj_.build(child_)
            self.set_implref(obj_)
# end class softPkgRef


class implRef(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, valueOf_=''):
        self.refid = refid
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if implRef.subclass:
            return implRef.subclass(*args_, **kwargs_)
        else:
            return implRef(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    refidProp = property(get_refid, set_refid)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='implRef', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='implRef')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='implRef'):
        outfile.write(' refid=%s' % (self.format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='implRef'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='implRef'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.refid is not None:
            showIndent(outfile, level)
            outfile.write('refid = %s,\n' % (self.refid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('refid'):
            self.refid = attrs.get('refid').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class implRef


class usesDevice(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, type_=None, id_=None, propertyref=None):
        self.type_ = type_
        self.id_ = id_
        if propertyref is None:
            self.propertyref = []
        else:
            self.propertyref = propertyref
    def factory(*args_, **kwargs_):
        if usesDevice.subclass:
            return usesDevice.subclass(*args_, **kwargs_)
        else:
            return usesDevice(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_propertyref(self): return self.propertyref
    def set_propertyref(self, propertyref): self.propertyref = propertyref
    def add_propertyref(self, value): self.propertyref.append(value)
    def insert_propertyref(self, index, value): self.propertyref[index] = value
    propertyrefProp = property(get_propertyref, set_propertyref)
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    type_Prop = property(get_type, set_type)
    def get_id(self): return self.id_
    def set_id(self, id_): self.id_ = id_
    id_Prop = property(get_id, set_id)
    def export(self, outfile, level, namespace_='', name_='usesDevice', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='usesDevice')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='usesDevice'):
        outfile.write(' type=%s' % (self.format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        outfile.write(' id=%s' % (self.format_string(quote_attrib(self.id_).encode(ExternalEncoding), input_name='id'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='usesDevice'):
        for propertyref_ in self.propertyref:
            propertyref_.export(outfile, level, namespace_, name_='propertyref')
    def hasContent_(self):
        if (
            self.propertyref is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='usesDevice'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_ = %s,\n' % (self.type_,))
        if self.id_ is not None:
            showIndent(outfile, level)
            outfile.write('id_ = %s,\n' % (self.id_,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('propertyref=[\n')
        level += 1
        for propertyref in self.propertyref:
            showIndent(outfile, level)
            outfile.write('model_.propertyref(\n')
            propertyref.exportLiteral(outfile, level, name_='propertyref')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('type'):
            self.type_ = attrs.get('type').value
        if attrs.get('id'):
            self.id_ = attrs.get('id').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'propertyref':
            obj_ = propertyRef.factory()
            obj_.build(child_)
            self.propertyref.append(obj_)
# end class usesDevice


class simpleref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, value=None, valueOf_=''):
        self.refid = refid
        self.value = value
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if simpleref.subclass:
            return simpleref.subclass(*args_, **kwargs_)
        else:
            return simpleref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    refidProp = property(get_refid, set_refid)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    valueProp = property(get_value, set_value)
    def getValueOf_(self): return self.valueOf_
    def setValueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def export(self, outfile, level, namespace_='', name_='simpleref', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='simpleref')
        outfile.write('>')
        self.exportChildren(outfile, level + 1, namespace_, name_)
        outfile.write('</%s%s>\n' % (namespace_, name_))
    def exportAttributes(self, outfile, level, namespace_='', name_='simpleref'):
        outfile.write(' refid=%s' % (self.format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
        outfile.write(' value=%s' % (self.format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='simpleref'):
        if self.valueOf_.find('![CDATA')>-1:
            value=quote_xml('%s' % self.valueOf_)
            value=value.replace('![CDATA','<![CDATA')
            value=value.replace(']]',']]>')
            outfile.write(value)
        else:
            outfile.write(quote_xml('%s' % self.valueOf_))
    def hasContent_(self):
        if (
            self.valueOf_ is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='simpleref'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.refid is not None:
            showIndent(outfile, level)
            outfile.write('refid = %s,\n' % (self.refid,))
        if self.value is not None:
            showIndent(outfile, level)
            outfile.write('value = %s,\n' % (self.value,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('valueOf_ = "%s",\n' % (self.valueOf_,))
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        self.valueOf_ = ''
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('refid'):
            self.refid = attrs.get('refid').value
        if attrs.get('value'):
            self.value = attrs.get('value').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.TEXT_NODE:
            self.valueOf_ += child_.nodeValue
        elif child_.nodeType == Node.CDATA_SECTION_NODE:
            self.valueOf_ += '![CDATA['+child_.nodeValue+']]'
# end class simpleref


class simplesequenceref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, values=None):
        self.refid = refid
        self.values = values
    def factory(*args_, **kwargs_):
        if simplesequenceref.subclass:
            return simplesequenceref.subclass(*args_, **kwargs_)
        else:
            return simplesequenceref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_values(self): return self.values
    def set_values(self, values): self.values = values
    valuesProp = property(get_values, set_values)
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    refidProp = property(get_refid, set_refid)
    def export(self, outfile, level, namespace_='', name_='simplesequenceref', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='simplesequenceref')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='simplesequenceref'):
        outfile.write(' refid=%s' % (self.format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='simplesequenceref'):
        if self.values:
            self.values.export(outfile, level, namespace_, name_='values', )
    def hasContent_(self):
        if (
            self.values is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='simplesequenceref'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.refid is not None:
            showIndent(outfile, level)
            outfile.write('refid = %s,\n' % (self.refid,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.values:
            showIndent(outfile, level)
            outfile.write('values=model_.values(\n')
            self.values.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('refid'):
            self.refid = attrs.get('refid').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'values':
            obj_ = values.factory()
            obj_.build(child_)
            self.set_values(obj_)
# end class simplesequenceref


class structref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, simpleref=None):
        self.refid = refid
        if simpleref is None:
            self.simpleref = []
        else:
            self.simpleref = simpleref
    def factory(*args_, **kwargs_):
        if structref.subclass:
            return structref.subclass(*args_, **kwargs_)
        else:
            return structref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_simpleref(self): return self.simpleref
    def set_simpleref(self, simpleref): self.simpleref = simpleref
    def add_simpleref(self, value): self.simpleref.append(value)
    def insert_simpleref(self, index, value): self.simpleref[index] = value
    simplerefProp = property(get_simpleref, set_simpleref)
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    refidProp = property(get_refid, set_refid)
    def export(self, outfile, level, namespace_='', name_='structref', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='structref')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='structref'):
        outfile.write(' refid=%s' % (self.format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='structref'):
        for simpleref_ in self.simpleref:
            simpleref_.export(outfile, level, namespace_, name_='simpleref')
    def hasContent_(self):
        if (
            self.simpleref is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='structref'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.refid is not None:
            showIndent(outfile, level)
            outfile.write('refid = %s,\n' % (self.refid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('simpleref=[\n')
        level += 1
        for simpleref in self.simpleref:
            showIndent(outfile, level)
            outfile.write('model_.simpleref(\n')
            simpleref.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('refid'):
            self.refid = attrs.get('refid').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'simpleref':
            obj_ = simpleref.factory()
            obj_.build(child_)
            self.simpleref.append(obj_)
# end class structref


class structsequenceref(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, refid=None, structvalue=None):
        self.refid = refid
        if structvalue is None:
            self.structvalue = []
        else:
            self.structvalue = structvalue
    def factory(*args_, **kwargs_):
        if structsequenceref.subclass:
            return structsequenceref.subclass(*args_, **kwargs_)
        else:
            return structsequenceref(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_structvalue(self): return self.structvalue
    def set_structvalue(self, structvalue): self.structvalue = structvalue
    def add_structvalue(self, value): self.structvalue.append(value)
    def insert_structvalue(self, index, value): self.structvalue[index] = value
    structvalueProp = property(get_structvalue, set_structvalue)
    def get_refid(self): return self.refid
    def set_refid(self, refid): self.refid = refid
    refidProp = property(get_refid, set_refid)
    def export(self, outfile, level, namespace_='', name_='structsequenceref', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='structsequenceref')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='structsequenceref'):
        outfile.write(' refid=%s' % (self.format_string(quote_attrib(self.refid).encode(ExternalEncoding), input_name='refid'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='structsequenceref'):
        for structvalue_ in self.structvalue:
            structvalue_.export(outfile, level, namespace_, name_='structvalue')
    def hasContent_(self):
        if (
            self.structvalue is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='structsequenceref'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        if self.refid is not None:
            showIndent(outfile, level)
            outfile.write('refid = %s,\n' % (self.refid,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('structvalue=[\n')
        level += 1
        for structvalue in self.structvalue:
            showIndent(outfile, level)
            outfile.write('model_.structvalue(\n')
            structvalue.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        if attrs.get('refid'):
            self.refid = attrs.get('refid').value
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'structvalue':
            obj_ = structvalue.factory()
            obj_.build(child_)
            self.structvalue.append(obj_)
# end class structsequenceref


class structvalue(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, simpleref=None):
        if simpleref is None:
            self.simpleref = []
        else:
            self.simpleref = simpleref
    def factory(*args_, **kwargs_):
        if structvalue.subclass:
            return structvalue.subclass(*args_, **kwargs_)
        else:
            return structvalue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_simpleref(self): return self.simpleref
    def set_simpleref(self, simpleref): self.simpleref = simpleref
    def add_simpleref(self, value): self.simpleref.append(value)
    def insert_simpleref(self, index, value): self.simpleref[index] = value
    simplerefProp = property(get_simpleref, set_simpleref)
    def export(self, outfile, level, namespace_='', name_='structvalue', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='structvalue')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='structvalue'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='structvalue'):
        for simpleref_ in self.simpleref:
            simpleref_.export(outfile, level, namespace_, name_='simpleref')
    def hasContent_(self):
        if (
            self.simpleref is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='structvalue'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('simpleref=[\n')
        level += 1
        for simpleref in self.simpleref:
            showIndent(outfile, level)
            outfile.write('model_.simpleref(\n')
            simpleref.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'simpleref':
            obj_ = simpleref.factory()
            obj_.build(child_)
            self.simpleref.append(obj_)
# end class structvalue


class values(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, value=None):
        if value is None:
            self.value = []
        else:
            self.value = value
    def factory(*args_, **kwargs_):
        if values.subclass:
            return values.subclass(*args_, **kwargs_)
        else:
            return values(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def add_value(self, value): self.value.append(value)
    def insert_value(self, index, value): self.value[index] = value
    valueProp = property(get_value, set_value)
    def export(self, outfile, level, namespace_='', name_='values', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s' % (namespace_, name_, ))
        if len(namespacedef_) > 0: outfile.write('%s' % (namespacedef_, ))
        self.exportAttributes(outfile, level, namespace_, name_='values')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write(' />\n')
    def exportAttributes(self, outfile, level, namespace_='', name_='values'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='values'):
        for value_ in self.value:
            showIndent(outfile, level)
            outfile.write('<%svalue>%s</%svalue>\n' % (namespace_, self.format_string(quote_xml(value_).encode(ExternalEncoding), input_name='value'), namespace_))
    def hasContent_(self):
        if (
            self.value is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='values'):
        level += 1
        self.exportLiteralAttributes(outfile, level, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('value=[\n')
        level += 1
        for value in self.value:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(value).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node_):
        attrs = node_.attributes
        self.buildAttributes(attrs)
        for child_ in node_.childNodes:
            nodeName_ = child_.nodeName.split(':')[-1]
            self.buildChildren(child_, nodeName_)
    def buildAttributes(self, attrs):
        pass
    def buildChildren(self, child_, nodeName_):
        if child_.nodeType == Node.ELEMENT_NODE and \
            nodeName_ == 'value':
            value_ = ''
            for text__content_ in child_.childNodes:
                value_ += text__content_.nodeValue
            self.value.append(value_)
# end class values


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
Options:
    -s        Use the SAX parser, not the minidom parser.
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def parse(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = softPkg.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="softPkg", 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    doc = minidom.parseString(inString)
    rootNode = doc.documentElement
    rootObj = softPkg.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="softPkg",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = minidom.parse(inFileName)
    rootNode = doc.documentElement
    rootObj = softPkg.factory()
    rootObj.build(rootNode)
    doc.unlink()
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('from spd import *\n\n')
##     sys.stdout.write('rootObj = softPkg(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_="softPkg")
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    main()
    #import pdb
    #pdb.run('main()')

