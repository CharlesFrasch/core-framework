

    //
    // GetEventChannel
    //
    // Will first lookup an event channel given the value of the name parameter... it will try to resolve the
    // name using different event channel resolution methods:
    // 1) resolve using naming services's resolve_str method
    // 2) resolve if channel defined with InitRef method and resolve_initial_reference method
    // 3) resolve as corbaname   corbaname::#channelname
    // 4) resolve with  corbaloc
    //
    // If channel was not found and create==true then create the channel from the EventChannelFactory
    //
    CosEventChannelAdmin::EventChannel_ptr GetEventChannel ( const std::string& name, 
							     const bool create=false,
							     const std::string &host="localhost" );


    CosEventChannelAdmin::EventChannel_ptr GetEventChannel ( const std::string&  name, 
							     const std::string&  ns_context, 
							     const bool          create=false,
							     const std::string   &host="localhost" );


    //
    // CreateEventChannel
    //
    // Create an EventChannel within the current ORB context, once created bind to the same name....
    //
    CosEventChannelAdmin::EventChannel_ptr CreateEventChannel( const std::string& name, 
							       ossie::corba::NS_ACTION action=ossie::corba::NS_BIND );

    CosEventChannelAdmin::EventChannel_ptr CreateEventChannel( const std::string& name, 
							       const std::string& ns_context,
							       ossie::corba:::NS_ACTION action=ossie::corba::NS_BIND );
    //
    // PushEventConsumer
    //
    // This class will perform the subscription portion of the a publisher/subscriber pattern 
    // over a CORBA EventChannel.  If the Channel does not exist it will try to create
    // and register the channel in the NamingService
    //
    //
    class  PushEventConsumer {

    public:
      //
      // Callback interface when data arrives event happens
      //
      typedef void   (*DataArrivedCallbackFn)( const CORBA::Any &data );

      //
      // Interface definition that will be notified when data arrives on a EventChannel
      //
      class DataArrivedListener {

      public:
	virtual void operator() ( const CORBA::Any &data ) = 0;
	virtual ~DataArrivedListener() {};

      };

      /**
       * Allow for member functions to receive connect/disconnect notifications
       */
      template <class T>
	class MemberDataArrivedListener : public DataArrivedListener
	{
	public:
	  typedef boost::shared_ptr< MemberDataArrivedListener< T > > SPtr;
      
	  typedef void (T::*MemberFn)( const CORBA::Any &data );

	  static SPtr Create( T &target, MemberFn func ){
	    return SPtr( new MemberDataArrivedListener(target, func ) );
	  };

	  virtual void operator() ( const CORBA::Any &data )
	  {
	    (target_.*func_)(data);
	  }

	  // Only allow PropertySet_impl to instantiate this class.
	  MemberDataArrivedListener ( T& target,  MemberFn func) :
	  target_(target),
	    func_(func)
	    {
	    }
	private:
	  T& target_;
	  MemberFn func_;
	};

      /**
       * Wrap Callback functions as ConnectionEventListener objects
       */
      class StaticDataArrivedListener : public DataArrivedListener
      {
      public:
	virtual void operator() ( const CORBA::Any &data )
	{
	  (*func_)(data);
	}

	StaticDataArrivedListener ( DataArrivedCallbackFn func) :
	func_(func)
	{
	}

      private:

	DataArrivedCallbackFn func_;
      };

      //
      // Define base class for consumers
      //

      typedef POA_CosEventComm::PushConsumer       Consumer;
      typedef CosEventComm::PushConsumer_var   Consumer_var;
      typedef CosEventComm::PushConsumer_ptr   Consumer_ptr;


      //
      // Create the context for a PushEvent Supplier for a CORBA EventService
      //
      // @param channelName  event channel name to subscribe to
      // @param consumer actual consumer object that receives pushed data
      // @param retries number of retries to perform when trying to establish subscriber interface (-1 tries forever)
      // @param retry_wait number of millisecs to wait between retries
      PushEventConsumer(  const std::string &channelName, 
			  Consumer*          consumer,
			  const int          retries=10, 
			  const int          retry_wait=10 );

      PushEventConsumer(  const std::string &channelName, 
			  const std::string &ncName, 
			  Consumer*          consumer,
			  const int          retries=10, 
			  const int          retry_wait=10 );

      PushEventConsumer(  const std::string &channelName, 
			  const int          retries=10, 
			  const int          retry_wait=10 );

      PushEventConsumer(  const std::string &channelName, 
			  const std::string &ncName, 
			  const int          retries=10, 
			  const int          retry_wait=10 );
      //
      // DTOR
      //
      virtual ~PushEventConsumer();

      //
      // 
      //
      const Consumer    *getConsumer() { return consumer; };

      // 
      // Attach/detach sequence does not work for some reason.
      //
#if 0    
      Consumer          *setConsumer( Consumer *newConsumer ) { 
	detach();
	consumer = newConsumer;
	attach();
      }

      void attach();
      void dettach();
#endif

      //
      // Attach callback listener when data arrives to Consumer object
      //
      template< typename T > inline
	void setDataArrivedListener(T &target, void (T::*func)( const CORBA::Any &data )  ) {
	dataArrivedCB =  boost::make_shared< MemberDataArrivedListener< T > >( boost::ref(target), func );
      };

      template< typename T > inline
	void setDataArrivedListener(T *target, void (T::*func)( const CORBA::Any &data  )  ) {
	dataArrivedCB =  boost::make_shared< MemberDataArrivedListener< T > >( boost::ref(*target), func );
      };

      void   setDataArrivedListener( DataArrivedListener *newListener );
      void   setDataArrivedListener( DataArrivedCallbackFn  newListener );

    protected:

      //
      // CallbackConsumer 
      //
      class CallbackConsumer : public Consumer {
    public:
      virtual ~CallbackConsumer() {};
      virtual void push( const CORBA::Any &data ) {
	if ( parent.dataArrivedCB ) {
	  try{
	    (*parent.dataArrivedCB)( data );
	  }
	  catch(...){
	  }
	}

      };
      virtual void disconnect_push_consumer () {} ;

    private:
      friend class PushEventConsumer;

      CallbackConsumer ( PushEventConsumer &parent) : 
      parent(parent) 
      {
      } ;

    protected:
      PushEventConsumer &parent;

    };

    friend class CallbackConsumer;

    //
    // Channel name
    //
    std::string                                 name;

    //
    // Naming context where channel is bound
    //
    std::string                                 nc_name;

    //
    // handle to the EventChannel
    //
    CosEventChannelAdmin::EventChannel_var      channel;

    //
    // Get Supplier Admin interface 
    //
    CosEventChannelAdmin::ConsumerAdmin_var     consumer_admin;

    //
    // Get proxy supplier that is providing the data
    //
    CosEventChannelAdmin::ProxyPushSupplier_var proxy_for_supplier;

    //
    // Push Consumer
    //
    Consumer                                    *consumer;

    //
    // PushConsumer Callback...
    // 
    // Used by default Consumer object to call registered callback
    //
    boost::shared_ptr< DataArrivedListener >    dataArrivedCB;

    //
    // number of retries to perform (-1 == try forever)
    //
    int retries;

    //
    // number of milliseconds to wait between retry operations
    //
    int retry_wait;

    private:

    void _init( );


    }; // end of PushEventConsumer
